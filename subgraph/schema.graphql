type BridgingCompleted @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  caller: Bytes! # address
  referral: Int! # uint16
  bridgedAmount: BigInt! # uint256
  depositorFee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DepositFinalized @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  tbtcAmount: BigInt! # uint256
  finalizedAt: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DepositInitialized @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  initializedAt: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DepositorFeeDivisorUpdated @entity(immutable: true) {
  id: Bytes!
  depositorFeeDivisor: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferStarted @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeRequestCancelledFromQueue @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  staker: Bytes! # address
  amountToStake: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeRequestFinalized @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  caller: Bytes! # address
  stakedAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeRequestFinalizedFromQueue @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  caller: Bytes! # address
  stakedAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeRequestInitialized @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  caller: Bytes! # address
  staker: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type StakeRequestQueued @entity(immutable: true) {
  id: Bytes!
  depositKey: BigInt! # uint256
  caller: Bytes! # address
  queuedAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
