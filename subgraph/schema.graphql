enum EventType {
  Requested
  Initialized
  Finalized
}

interface ActivityData @key(fields: "id") {
  id: ID!
  depositOwner: DepositOwner!
  events: [Event!]
  bitcoinTransactionId: String
}

type DepositOwner @entity {
  # Id is the ethereum address of the account.
  id: ID!
  activities: [ActivityData!] @derivedFrom(field: "depositOwner")
}

type Deposit implements ActivityData @entity {
  id: ID!
  depositOwner: DepositOwner!
  events: [Event!] @derivedFrom(field: "activity")
  initialDepositAmount: BigInt!
  bridgedAmount: BigInt
  depositorFee: BigInt
  amountToDeposit: BigInt
  referral: Int
  bitcoinTransactionId: String
}

type Withdraw implements ActivityData @entity {
  id: ID!
  depositOwner: DepositOwner!
  events: [Event!] @derivedFrom(field: "activity")
  # TODO: amount field will be updated when working on withdraw 
  amount: BigInt
  requestedAmount: BigInt
  bitcoinTransactionId: String
}

type Event @entity {
  # Id is the transaction hash.
  id: ID!
  timestamp: BigInt!
  activity: ActivityData
  type: EventType!
}

type RedemptionKeyCounter @entity {
  # keccak256(keccak256(redeemerOutputScript) | walletPubKeyHash)
  id: ID!
  counter: BigInt!
}

type RedemptionsCompletedEvent @entity {
  # wallet public key hash + block hash
  id: ID!
  redemptionTxHash: Bytes!
}
