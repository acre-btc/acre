enum EventType {
  Unknown
  Initialized
  Finalized
}

interface ActivityData @key(fields: "id") {
  id: ID!
  depositOwner: DepositOwner!
  events: [Event!]
  bitcoinTransactionId: String
}

type DepositOwner @entity {
  # Id is the ethereum address of the account.
  id: ID!
  activities: [ActivityData!] @derivedFrom(field: "depositOwner")
}

type Deposit implements ActivityData @entity {
  id: ID!
  depositOwner: DepositOwner!
  events: [Event!] @derivedFrom(field: "activity")
  initialDepositAmount: BigInt!
  amountToDeposit: BigInt
  bridgedAmount: BigInt
  depositorFee: BigInt
  referral: BigInt
  bitcoinTransactionId: String
  # TODO: add these fields when event & contract be ready
  # entryFee (amountToDeposit - depositedAmount)
  # depositedAmount: assets from deposit event (stbtc contract)
  # shares: shares from deposit event(stbtc contract)
}

type Withdraw implements ActivityData @entity {
  id: ID!
  depositOwner: DepositOwner!
  events: [Event!] @derivedFrom(field: "activity")
  initialDepositAmount: BigInt!
  amountToDeposit: BigInt
  bitcoinTransactionId: String
}

type Event @entity {
  # Id is the transaction hash.
  id: ID!
  timestamp: BigInt!
  activity: ActivityData
  type: EventType
  amount: BigInt!
}
