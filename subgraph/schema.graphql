enum ChainType {
  Bitcoin
  Ethereum
}

enum LogType {
  Initialized
  Finalized
  Queued
  FinalizedFromQueue
  CancelledFromQueue
}

interface ActivityData @key(fields: "id") {
  id: ID!
  depositOwner: DepositOwner!
  logs: [LogData!]
}

type DepositOwner @entity {
  # Id is the ethereum address of the account.
  id: ID!
  activities: [ActivityData!] @derivedFrom(field: "depositOwner")
}

type Stake implements ActivityData @entity{
  id: ID!
  depositOwner: DepositOwner!
  logs: [LogData!] @derivedFrom(field: "activity")
  initialDepositAmountSatoshi: BigInt!
  amountToStakeStBtc: BigInt
  shareStBtc: BigInt
}

type Unstake implements ActivityData @entity{
  id: ID!
  depositOwner: DepositOwner!
  logs: [LogData!] @derivedFrom(field: "activity")
  initialDepositAmountSatoshi: BigInt!
  amountToStakeStBtc: BigInt
  shareStBtc: BigInt
}

type LogData @entity {
  # Id is the transaction hash.
  id: ID!
  timestamp: BigInt!
  activity: ActivityData
  chain: ChainType!
  type: LogType
  amount: BigInt!
}
