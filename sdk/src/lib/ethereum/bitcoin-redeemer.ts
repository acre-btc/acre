import { BitcoinRedeemer as BitcoinRedeemerTypechain } from "@acre-btc/contracts/typechain/contracts/BitcoinRedeemer"
import BitcoinRedeemerArtifact from "@acre-btc/contracts/deployments/sepolia/BitcoinRedeemer.json"

import {
  EthersContractConfig,
  EthersContractDeployment,
  EthersContractWrapper,
} from "./contract"
import { ChainIdentifier, BitcoinRedeemer } from "../contracts"
import { EthereumNetwork } from "./network"

export default class EthereumBitcoinRedeemer
  // @ts-expect-error TODO: Figure out why type generated by typechain does not
  // satisfy the constraint `Contract`. Error: `Property '[internal]' is missing
  // in type 'BitcoinDepositor' but required in type 'Contract'`.
  extends EthersContractWrapper<BitcoinRedeemerTypechain>
  implements BitcoinRedeemer
{
  constructor(config: EthersContractConfig, network: EthereumNetwork) {
    let artifact: EthersContractDeployment

    switch (network) {
      case "sepolia":
        artifact = BitcoinRedeemerArtifact
        break
      case "mainnet":
      default:
        throw new Error("Unsupported network")
    }

    super(config, artifact)
  }

  /**
   * @see {BitcoinRedeemer#getChainIdentifier}
   */
  getChainIdentifier(): ChainIdentifier {
    return this.getAddress()
  }
}
