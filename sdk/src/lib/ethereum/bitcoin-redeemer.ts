import { BitcoinRedeemer as BitcoinRedeemerTypechain } from "@acre-btc/contracts/typechain/contracts/BitcoinRedeemer"
import SepoliaBitcoinRedeemer from "@acre-btc/contracts/deployments/sepolia/BitcoinRedeemer.json"
import MainnetBitcoinRedeemer from "@acre-btc/contracts/deployments/mainnet/BitcoinRedeemer.json"

import {
  EthersContractConfig,
  EthersContractDeployment,
  EthersContractWrapper,
} from "./contract"
import { ChainIdentifier, BitcoinRedeemer, WithdrawalFees } from "../contracts"
import { EthereumNetwork } from "./network"
import TbtcBridge from "./tbtc-bridge"

type TbtcBridgeRedemptionParameters = {
  redemptionTreasuryFeeDivisor: bigint
}

type BitcoinRedeemerCache = {
  tbtcBridgeRedemptionParameters: TbtcBridgeRedemptionParameters | undefined
}

export default class EthereumBitcoinRedeemer
  // @ts-expect-error TODO: Figure out why type generated by typechain does not
  // satisfy the constraint `Contract`. Error: `Property '[internal]' is missing
  // in type 'BitcoinRedeemer' but required in type 'Contract'`.
  extends EthersContractWrapper<BitcoinRedeemerTypechain>
  implements BitcoinRedeemer
{
  #cache: BitcoinRedeemerCache

  #tbtcBridge: TbtcBridge | undefined

  constructor(config: EthersContractConfig, network: EthereumNetwork) {
    let artifact: EthersContractDeployment

    switch (network) {
      case "sepolia":
        artifact = SepoliaBitcoinRedeemer
        break
      case "mainnet":
        artifact = MainnetBitcoinRedeemer
        break
      default:
        throw new Error("Unsupported network")
    }

    super(config, artifact)
    this.#cache = {
      tbtcBridgeRedemptionParameters: undefined,
    }
  }

  setTbtcContracts({ tbtcBridge }: { tbtcBridge: TbtcBridge }): void {
    this.#tbtcBridge = tbtcBridge
  }

  /**
   * @see {BitcoinRedeemer#getChainIdentifier}
   */
  getChainIdentifier(): ChainIdentifier {
    return this.getAddress()
  }

  /**
   * @see {BitcoinRedeemer#calculateWithdrawalFee}
   */
  async calculateWithdrawalFee(
    amountToWithdraw: bigint,
  ): Promise<WithdrawalFees> {
    const { redemptionTreasuryFeeDivisor } =
      await this.#getTbtcBridgeRedemptionParameters()

    const treasuryFee =
      redemptionTreasuryFeeDivisor > 0
        ? amountToWithdraw / redemptionTreasuryFeeDivisor
        : 0n

    return {
      tbtc: {
        treasuryFee,
      },
    }
  }

  // TODO: Consider exposing it from tBTC SDK.
  async #getTbtcBridgeRedemptionParameters(): Promise<TbtcBridgeRedemptionParameters> {
    if (this.#cache.tbtcBridgeRedemptionParameters) {
      return this.#cache.tbtcBridgeRedemptionParameters
    }

    if (!this.#tbtcBridge) {
      throw new Error("tBTC contracts not set")
    }

    const { redemptionTreasuryFeeDivisor } =
      await this.#tbtcBridge.redemptionParameters()

    this.#cache.tbtcBridgeRedemptionParameters = {
      redemptionTreasuryFeeDivisor,
    }
    return this.#cache.tbtcBridgeRedemptionParameters
  }
}
