import { packRevealDepositParameters } from "@keep-network/tbtc-v2.ts"
import { BitcoinDepositor as BitcoinDepositorTypechain } from "@acre-btc/contracts/typechain/contracts/BitcoinDepositor"
import {
  ZeroAddress,
  dataSlice,
  getAddress,
  isAddress,
  solidityPacked,
  zeroPadBytes,
} from "ethers"
import {
  ChainIdentifier,
  DecodedExtraData,
  BitcoinDepositor,
  DepositReceipt,
} from "../contracts"
import { BitcoinRawTxVectors } from "../bitcoin"
import { EthereumAddress } from "./address"
import {
  EthersContractConfig,
  EthersContractDeployment,
  EthersContractWrapper,
} from "./contract"
import { Hex } from "../utils"
import { EthereumNetwork } from "./network"

import SepoliaBitcoinDepositor from "./artifacts/sepolia/BitcoinDepositor.json"

/**
 * Ethereum implementation of the BitcoinDepositor.
 */
class EthereumBitcoinDepositor
  // @ts-expect-error TODO: Figure out why type generated by typechain does not
  // satisfy the constraint `Contract`. Error: `Property '[internal]' is missing
  // in type 'BitcoinDepositor' but required in type 'Contract'`.
  extends EthersContractWrapper<BitcoinDepositorTypechain>
  implements BitcoinDepositor
{
  constructor(config: EthersContractConfig, network: EthereumNetwork) {
    let artifact: EthersContractDeployment

    switch (network) {
      case "sepolia":
        artifact = SepoliaBitcoinDepositor
        break
      case "mainnet":
      default:
        throw new Error("Unsupported network")
    }

    super(config, artifact)
  }

  /**
   * @see {BitcoinDepositor#getChainIdentifier}
   */
  getChainIdentifier(): ChainIdentifier {
    return this.getAddress()
  }

  /**
   * @see {BitcoinDepositor#getTbtcVaultChainIdentifier}
   */
  async getTbtcVaultChainIdentifier(): Promise<ChainIdentifier> {
    const vault = await this.instance.tbtcVault()

    return EthereumAddress.from(vault)
  }

  /**
   * @see {BitcoinDepositor#revealDeposit}
   */
  async revealDeposit(
    depositTx: BitcoinRawTxVectors,
    depositOutputIndex: number,
    deposit: DepositReceipt,
  ): Promise<Hex> {
    const { fundingTx, reveal, extraData } = packRevealDepositParameters(
      depositTx,
      depositOutputIndex,
      deposit,
      await this.getTbtcVaultChainIdentifier(),
    )

    if (!extraData) throw new Error("Invalid extra data")

    const { staker, referral } = this.decodeExtraData(extraData)

    const tx = await this.instance.initializeStake(
      fundingTx,
      reveal,
      `0x${staker.identifierHex}`,
      referral,
    )

    return Hex.from(tx.hash)
  }

  /**
   * @see {BitcoinDepositor#encodeExtraData}
   * @dev Packs the data to bytes32: 20 bytes of staker address and 2 bytes of
   *      referral, 10 bytes of trailing zeros.
   */
  // eslint-disable-next-line class-methods-use-this
  encodeExtraData(staker: ChainIdentifier, referral: number): Hex {
    const stakerAddress = `0x${staker.identifierHex}`

    if (!isAddress(stakerAddress) || stakerAddress === ZeroAddress)
      throw new Error("Invalid staker address")

    const encodedData = solidityPacked(
      ["address", "uint16"],
      [stakerAddress, referral],
    )

    return Hex.from(zeroPadBytes(encodedData, 32))
  }

  /**
   * @see {BitcoinDepositor#decodeExtraData}
   * @dev Unpacks the data from bytes32: 20 bytes of staker address and 2
   *      bytes of referral, 10 bytes of trailing zeros.
   */
  // eslint-disable-next-line class-methods-use-this
  decodeExtraData(extraData: string): DecodedExtraData {
    const staker = EthereumAddress.from(getAddress(dataSlice(extraData, 0, 20)))
    const referral = Number(dataSlice(extraData, 20, 22))

    return { staker, referral }
  }
}

export { EthereumBitcoinDepositor, packRevealDepositParameters }
