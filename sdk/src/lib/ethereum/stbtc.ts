import { StBTC as StBTCTypechain } from "core/typechain/contracts/StBTC"
import SepoliaTbtcDepositor from "core/deployments/sepolia/stBTC.json"
import {
  EthersContractConfig,
  EthersContractDeployment,
  EthersContractWrapper,
} from "./contract"
import { ChainIdentifier, StBTC } from "../contracts"
import { EthereumNetwork } from "./network"

class EthereumStBTC
  // @ts-expect-error TODO: Figure out why type generated by typechain does not
  // satisfy the constraint `Contract`. Error: `Property '[internal]' is missing
  // in type 'StBTC' but required in type 'BaseContract'`.
  extends EthersContractWrapper<StBTCTypechain>
  implements StBTC
{
  constructor(config: EthersContractConfig, network: EthereumNetwork) {
    let artifact: EthersContractDeployment

    switch (network) {
      case "sepolia":
        artifact = SepoliaTbtcDepositor as EthersContractDeployment
        break
      case "mainnet":
      default:
        throw new Error("Unsupported network")
    }

    super(config, artifact)
  }

  /**
   * Get a generic chain identifier
   * @returns value of the basis for calculating final BTC balance
   */
  balanceOf(identifier: ChainIdentifier): Promise<bigint> {
    return this.instance.balanceOf(identifier.identifierHex)
  }

  /**
   * Get a generic chain identifier
   * @returns maximum withdraw value
   */
  assetsBalanceOf(identifier: ChainIdentifier): Promise<bigint> {
    return this.instance.assetsBalanceOf(identifier.identifierHex)
  }
}

// eslint-disable-next-line import/prefer-default-export
export { EthereumStBTC }
