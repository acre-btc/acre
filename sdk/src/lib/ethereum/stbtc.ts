import {
  EthersContractConfig,
  EthersContractDeployment,
  EthersContractWrapper,
} from "./contract"
import { ChainIdentifier, StBTC } from "../contracts"

import SepoliaTbtcDepositor from "./artifacts/sepolia/TbtcDepositor.json"
import { EthereumNetwork } from "./network"

export default class EtherumStBTC
  // @ts-expect-error TODO: Figure out why type generated by typechain does not
  // satisfy the constraint `Contract`. Error: `Property '[internal]' is missing
  // in type 'StBTC' but required in type 'BaseContract'`.
  extends EthersContractWrapper<StBTC>
{
  constructor(config: EthersContractConfig, network: EthereumNetwork) {
    let artifact: EthersContractDeployment

    switch (network) {
      case "sepolia":
        artifact = SepoliaTbtcDepositor
        break
      case "mainnet":
      default:
        throw new Error("Unsupported network")
    }

    super(config, artifact)
  }

  balanceOf(identifier: ChainIdentifier): Promise<bigint> {
    return this.instance.balanceOf(identifier)
  }

  assetsBalanceOf(identifier: ChainIdentifier): Promise<bigint> {
    return this.instance.assetsBalanceOf(identifier)
  }
}
