import { BitcoinRawTxVectors, Hex } from "@keep-network/tbtc-v2.ts"
import { TbtcDepositor as TbtcDepositorTypechain } from "core/typechain/contracts/tbtc/TbtcDepositor"
import { ChainIdentifier, DepositRevealInfo, TBTCDepositor } from "../contracts"
import { EthereumAddress } from "./address"
import { EthersContractWrapper } from "./contract"

class EthereumTBTCDepositor
  // @ts-expect-error TODO: Figure out why type generated by typechain does not
  // satisfy the constraint `Contract`. Error: `Property '[internal]' is missing
  // in type 'TbtcDepositor' but required in type 'Contract'`.
  extends EthersContractWrapper<TbtcDepositorTypechain>
  implements TBTCDepositor
{
  getChainIdentifier(): ChainIdentifier {
    return this.getAddress()
  }

  async getTbtcVaultChainIdentifier(): Promise<ChainIdentifier> {
    const vault = await this.instance.tbtcVault()

    return EthereumAddress.from(vault)
  }

  async initializeStake(
    bitcoinFundingTransaction: BitcoinRawTxVectors,
    depositReveal: DepositRevealInfo,
    receiver: ChainIdentifier,
    referral: number,
  ): Promise<Hex> {
    const depositTxInfo = {
      version: bitcoinFundingTransaction.version.toPrefixedString(),
      inputVector: bitcoinFundingTransaction.inputs.toPrefixedString(),
      outputVector: bitcoinFundingTransaction.outputs.toPrefixedString(),
      locktime: bitcoinFundingTransaction.locktime.toPrefixedString(),
    }

    const vault = await this.getTbtcVaultChainIdentifier()

    const depositRevealInfo = {
      fundingOutputIndex: depositReveal.fundingOutputIndex,
      blindingFactor: depositReveal.blindingFactor.toPrefixedString(),
      walletPubKeyHash: depositReveal.walletPublicKeyHash.toPrefixedString(),
      refundPubKeyHash: depositReveal.refundPublicKeyHash.toPrefixedString(),
      refundLocktime: depositReveal.refundLocktime.toPrefixedString(),
      vault: `0x${vault.identifierHex}`,
    }

    const tx = await this.instance.initializeStake(
      depositTxInfo,
      depositRevealInfo,
      receiver.identifierHex,
      referral,
    )

    return Hex.from(tx.hash)
  }
}

// eslint-disable-next-line import/prefer-default-export
export { EthereumTBTCDepositor }
