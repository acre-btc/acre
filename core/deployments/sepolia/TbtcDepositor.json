{
  "address": "0x829fdCDf6Be747FEA37518fBd83dF70EE371fCf2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBridge",
          "name": "_bridge",
          "type": "address"
        },
        {
          "internalType": "contract ITBTCVault",
          "name": "_tbtcVault",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tbtcToken",
          "type": "address"
        },
        {
          "internalType": "contract Acre",
          "name": "_acre",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgingAlreadyCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BridgingNotCompleted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CallerNotReceiver",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReceiverIsZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeRequestAlreadyFinalized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeRequestAlreadyInProgress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StakeRequestNotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TbtcDepositNotCompleted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeDepositRequestDepositor",
          "type": "address"
        }
      ],
      "name": "UnexpectedDepositor",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridgeDepositRequestVault",
          "type": "address"
        }
      ],
      "name": "UnexpectedTbtcVault",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositKey",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToStake",
          "type": "uint256"
        }
      ],
      "name": "BridgingCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "depositorFeeDivisor",
          "type": "uint64"
        }
      ],
      "name": "DepositorFeeDivisorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositKey",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "StakeFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositKey",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "referral",
          "type": "uint16"
        }
      ],
      "name": "StakeInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "depositKey",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "StakeRecalled",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SATOSHI_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acre",
      "outputs": [
        {
          "internalType": "contract Acre",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridge",
      "outputs": [
        {
          "internalType": "contract IBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fundingTxHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "fundingOutputIndex",
          "type": "uint32"
        }
      ],
      "name": "calculateDepositKey",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "extraData",
          "type": "bytes32"
        }
      ],
      "name": "decodeExtraData",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referral",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositorFeeDivisor",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referral",
          "type": "uint16"
        }
      ],
      "name": "encodeExtraData",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositKey",
          "type": "uint256"
        }
      ],
      "name": "finalizeStakeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes4",
              "name": "version",
              "type": "bytes4"
            },
            {
              "internalType": "bytes",
              "name": "inputVector",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "outputVector",
              "type": "bytes"
            },
            {
              "internalType": "bytes4",
              "name": "locktime",
              "type": "bytes4"
            }
          ],
          "internalType": "struct IBridge.BitcoinTxInfo",
          "name": "fundingTx",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fundingOutputIndex",
              "type": "uint32"
            },
            {
              "internalType": "bytes8",
              "name": "blindingFactor",
              "type": "bytes8"
            },
            {
              "internalType": "bytes20",
              "name": "walletPubKeyHash",
              "type": "bytes20"
            },
            {
              "internalType": "bytes20",
              "name": "refundPubKeyHash",
              "type": "bytes20"
            },
            {
              "internalType": "bytes4",
              "name": "refundLocktime",
              "type": "bytes4"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            }
          ],
          "internalType": "struct IBridge.DepositRevealInfo",
          "name": "reveal",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referral",
          "type": "uint16"
        }
      ],
      "name": "initializeStakeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositKey",
          "type": "uint256"
        }
      ],
      "name": "notifyBridgingCompleted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositKey",
          "type": "uint256"
        }
      ],
      "name": "recallStakeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakeRequests",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "requestedAt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "finalizedAt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "tbtcDepositTxMaxFee",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "tbtcOptimisticMintingFeeDivisor",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "amountToStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tbtcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tbtcVault",
      "outputs": [
        {
          "internalType": "contract ITBTCVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "newDepositorFeeDivisor",
          "type": "uint64"
        }
      ],
      "name": "updateDepositorFeeDivisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe657bbcca62298edc15e27414dfe791c7398a29745fcdafa279f69f971f50f69",
  "receipt": {
    "to": null,
    "from": "0x086813525A7dC7dafFf015Cdf03896Fd276eab60",
    "contractAddress": "0x829fdCDf6Be747FEA37518fBd83dF70EE371fCf2",
    "transactionIndex": 83,
    "gasUsed": "1837850",
    "logsBloom": "0x
    "blockHash": "0x21e7f2005e638b7de580a9b10a8ea2bcd34c493ff6d5daa1ad4f174581698155",
    "transactionHash": "0xe657bbcca62298edc15e27414dfe791c7398a29745fcdafa279f69f971f50f69",
    "logs": [
      {
        "transactionIndex": 83,
        "blockNumber": 5185170,
        "transactionHash": "0xe657bbcca62298edc15e27414dfe791c7398a29745fcdafa279f69f971f50f69",
        "address": "0x829fdCDf6Be747FEA37518fBd83dF70EE371fCf2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000086813525a7dc7dafff015cdf03896fd276eab60"
        ],
        "data": "0x",
        "logIndex": 148,
        "blockHash": "0x21e7f2005e638b7de580a9b10a8ea2bcd34c493ff6d5daa1ad4f174581698155"
      }
    ],
    "blockNumber": 5185170,
    "cumulativeGasUsed": "8810765",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9b1a7fE5a16A15F2f9475C5B231750598b113403",
    "0xB5679dE944A79732A75CE556191DF11F489448d5",
    "0x517f2982701695D4E52f1ECFBEf3ba31Df470161",
    "0x55F836777302CE096CC7770142a8262A2627E2e9"
  ],
  "numDeployments": 1,
  "solcInputHash": "4a46f2857b613ff7d1ade642059e3598",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"_bridge\",\"type\":\"address\"},{\"internalType\":\"contract ITBTCVault\",\"name\":\"_tbtcVault\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tbtcToken\",\"type\":\"address\"},{\"internalType\":\"contract Acre\",\"name\":\"_acre\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgingAlreadyCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BridgingNotCompleted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReceiverIsZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeRequestAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeRequestAlreadyInProgress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StakeRequestNotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TbtcDepositNotCompleted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeDepositRequestDepositor\",\"type\":\"address\"}],\"name\":\"UnexpectedDepositor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridgeDepositRequestVault\",\"type\":\"address\"}],\"name\":\"UnexpectedTbtcVault\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"name\":\"BridgingCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"depositorFeeDivisor\",\"type\":\"uint64\"}],\"name\":\"DepositorFeeDivisorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"StakeFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"StakeInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"StakeRecalled\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SATOSHI_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acre\",\"outputs\":[{\"internalType\":\"contract Acre\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridge\",\"outputs\":[{\"internalType\":\"contract IBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fundingTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"fundingOutputIndex\",\"type\":\"uint32\"}],\"name\":\"calculateDepositKey\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"extraData\",\"type\":\"bytes32\"}],\"name\":\"decodeExtraData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositorFeeDivisor\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"encodeExtraData\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"}],\"name\":\"finalizeStakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes4\",\"name\":\"version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"inputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"outputVector\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"locktime\",\"type\":\"bytes4\"}],\"internalType\":\"struct IBridge.BitcoinTxInfo\",\"name\":\"fundingTx\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fundingOutputIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes8\",\"name\":\"blindingFactor\",\"type\":\"bytes8\"},{\"internalType\":\"bytes20\",\"name\":\"walletPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes20\",\"name\":\"refundPubKeyHash\",\"type\":\"bytes20\"},{\"internalType\":\"bytes4\",\"name\":\"refundLocktime\",\"type\":\"bytes4\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"internalType\":\"struct IBridge.DepositRevealInfo\",\"name\":\"reveal\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referral\",\"type\":\"uint16\"}],\"name\":\"initializeStakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"}],\"name\":\"notifyBridgingCompleted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositKey\",\"type\":\"uint256\"}],\"name\":\"recallStakeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakeRequests\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"requestedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"finalizedAt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"tbtcDepositTxMaxFee\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"tbtcOptimisticMintingFeeDivisor\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amountToStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbtcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tbtcVault\",\"outputs\":[{\"internalType\":\"contract ITBTCVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newDepositorFeeDivisor\",\"type\":\"uint64\"}],\"name\":\"updateDepositorFeeDivisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"BridgingAlreadyCompleted()\":[{\"details\":\"Attempted to notify about completed bridging while the notification      was already submitted.\"}],\"BridgingNotCompleted()\":[{\"details\":\"Attempted to finalize a stake request, while bridging completion has not been notified yet.\"}],\"CallerNotReceiver()\":[{\"details\":\"Attempted to call function by an account that is not the receiver.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReceiverIsZeroAddress()\":[{\"details\":\"Receiver address is zero.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}],\"StakeRequestAlreadyFinalized()\":[{\"details\":\"Attempted to finalize a stake request that was already finalized.\"}],\"StakeRequestAlreadyInProgress()\":[{\"details\":\"Attempted to initiate a stake request that was already initialized.\"}],\"StakeRequestNotInitialized()\":[{\"details\":\"Attempted to finalize a stake request that has not been initialized.\"}],\"TbtcDepositNotCompleted()\":[{\"details\":\"Deposit was not completed on the tBTC side and tBTC was not minted      to the depositor contract. It is thrown when the deposit neither has      been optimistically minted nor swept.\"}],\"UnexpectedDepositor(address)\":[{\"details\":\"Depositor address stored in the Deposit Request in the tBTC Bridge      contract doesn't match the current contract address.\"}],\"UnexpectedTbtcVault(address)\":[{\"details\":\"Vault address stored in the Deposit Request in the tBTC Bridge      contract doesn't match the expected tBTC Vault contract address.\"}]},\"events\":{\"BridgingCompleted(uint256,address,uint256)\":{\"params\":{\"amountToStake\":\"Amount of tBTC token that is available to stake.\",\"caller\":\"Address that notified about bridging completion.\",\"depositKey\":\"Deposit identifier.\"}},\"DepositorFeeDivisorUpdated(uint64)\":{\"params\":{\"depositorFeeDivisor\":\"New value of the depositor fee divisor.\"}},\"StakeFinalized(uint256,address)\":{\"details\":\"Deposit details can be fetched from {{ ERC4626.Deposit }}      event emitted in the same transaction.\",\"params\":{\"caller\":\"Address that finalized the stake request.\",\"depositKey\":\"Deposit identifier.\"}},\"StakeInitialized(uint256,address,address,uint16)\":{\"details\":\"Deposit details can be fetched from {{ Bridge.DepositRevealed }}      event emitted in the same transaction.\",\"params\":{\"caller\":\"Address that initialized the stake request.\",\"depositKey\":\"Deposit identifier.\",\"receiver\":\"The address to which the stBTC shares will be minted.\",\"referral\":\"Data used for referral program.\"}},\"StakeRecalled(uint256,address)\":{\"params\":{\"caller\":\"Address that called the function to recall the stake.\",\"depositKey\":\"Deposit identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"calculateDepositKey(bytes32,uint32)\":{\"details\":\"The deposit key is computed as      `keccak256(fundingTxHash | fundingOutputIndex)`.\",\"params\":{\"fundingOutputIndex\":\"Output in Bitcoin transaction used to fund        the deposit.\",\"fundingTxHash\":\"Bitcoin transaction hash (ordered as in Bitcoin internally)\"},\"returns\":{\"_0\":\"Calculated Deposit Key.\"}},\"constructor\":{\"params\":{\"_acre\":\"Acre contract instance.\",\"_bridge\":\"tBTC Bridge contract instance.\",\"_tbtcVault\":\"tBTC Vault contract instance.\"}},\"decodeExtraData(bytes32)\":{\"details\":\"Unpacks the data from bytes32: 20 bytes of receiver address and      2 bytes of referral, 10 bytes of trailing zeros.\",\"params\":{\"extraData\":\"Encoded extra data.\"},\"returns\":{\"receiver\":\"The address to which the stBTC shares will be minted.\",\"referral\":\"Data used for referral program.\"}},\"encodeExtraData(address,uint16)\":{\"details\":\"Packs the data to bytes32: 20 bytes of receiver address and      2 bytes of referral, 10 bytes of trailing zeros.\",\"params\":{\"receiver\":\"The address to which the stBTC shares will be minted.\",\"referral\":\"Data used for referral program.\"},\"returns\":{\"_0\":\"Encoded extra data.\"}},\"finalizeStakeRequest(uint256)\":{\"details\":\"This function is expected to be called after `notifyBridgingCompleted`.      In case the call to `Acre.stake` function fails (e.g. because of the      maximum deposit limit being reached), the function should be retried      after the limit is increased or other user withdraws their funds      from Acre contract to make place for another deposit.      The staker has a possibility to submit `recallStakeRequest` that      will withdraw the minted tBTC token and abort staking in Acre contract.\",\"params\":{\"depositKey\":\"Deposit key computed as                   `keccak256(fundingTxHash | fundingOutputIndex)`.\"}},\"initializeStakeRequest((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address,uint16)\":{\"details\":\"Requirements:      - `reveal.walletPubKeyHash` must identify a `Live` wallet,      - `reveal.vault` must be 0x0 or point to a trusted vault,      - `reveal.fundingOutputIndex` must point to the actual P2(W)SH        output of the BTC deposit transaction,      - `reveal.blindingFactor` must be the blinding factor used in the        P2(W)SH BTC deposit transaction,      - `reveal.walletPubKeyHash` must be the wallet pub key hash used in        the P2(W)SH BTC deposit transaction,      - `reveal.refundPubKeyHash` must be the refund pub key hash used in        the P2(W)SH BTC deposit transaction,      - `reveal.refundLocktime` must be the refund locktime used in the        P2(W)SH BTC deposit transaction,      - `receiver` must be the receiver address used in the P2(W)SH BTC        deposit transaction as part of the extra data.      - `referral` must be the referral info used in the P2(W)SH BTC        deposit transaction as part of the extra data.      - BTC deposit for the given `fundingTxHash`, `fundingOutputIndex`        can be revealed only one time.      If any of these requirements is not met, the wallet _must_ refuse      to sweep the deposit and the depositor has to wait until the      deposit script unlocks to receive their BTC back.\",\"params\":{\"fundingTx\":\"Bitcoin funding transaction data, see `IBridge.BitcoinTxInfo`.\",\"receiver\":\"The address to which the stBTC shares will be minted.\",\"referral\":\"Data used for referral program.\",\"reveal\":\"Deposit reveal data, see `IBridge.DepositRevealInfo`.\"}},\"notifyBridgingCompleted(uint256)\":{\"details\":\"It calculates the amount to stake in Acre contract by deducting      tBTC protocol minting fee and the Depositor fee from the initial      funding transaction amount.      The tBTC protocol minting fee is calculated depending on the process      the tBTC was minted in:      - for swept deposits:        `amount = depositAmount - depositTreasuryFee - depositTxMaxFee`      - for optimistically minted deposits:        ```        amount = depositAmount - depositTreasuryFee - depositTxMaxFee               - optimisticMintingFee        ```      These calculation are simplified and can leave some positive      imbalance in the Depositor contract.      - depositTxMaxFee - this is a maximum transaction fee that can be deducted        on Bitcoin transaction sweeping,      - optimisticMintingFee - this is a optimistic minting fee snapshotted        at the moment of the deposit reveal, there is a chance that the fee        parameter is updated in the tBTC Vault contract before the optimistic        minting is finalized.      The imbalance is left in the tBTC Depositor contract.      The Depositor fee is computed based on the `depositorFeeDivisor`      parameter. The fee is transferred to the treasury wallet on the      stake request finalization.\",\"params\":{\"depositKey\":\"Deposit key computed as                   `keccak256(fundingTxHash | fundingOutputIndex)`.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recallStakeRequest(uint256)\":{\"details\":\"This function can be called only after bridging in tBTC Bridge was      completed. Only receiver provided in the extra data of the stake      request can call this function.\",\"params\":{\"depositKey\":\"Deposit key computed as                   `keccak256(fundingTxHash | fundingOutputIndex)`.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateDepositorFeeDivisor(uint64)\":{\"params\":{\"newDepositorFeeDivisor\":\"New depositor fee divisor value.\"}}},\"stateVariables\":{\"depositorFeeDivisor\":{\"details\":\"That fee is computed as follows:      `depositorFee = depositedAmount / depositorFeeDivisor`       for example, if the depositor fee needs to be 2% of each deposit,       the `depositorFeeDivisor` should be set to `50` because       `1/50 = 0.02 = 2%`.\"},\"stakeRequests\":{\"details\":\"The key is a deposit key computed in the same way as in tBTC Bridge:      `keccak256(fundingTxHash | fundingOutputIndex)`.\"}},\"title\":\"tBTC Depositor contract.\",\"version\":1},\"userdoc\":{\"events\":{\"BridgingCompleted(uint256,address,uint256)\":{\"notice\":\"Emitted when bridging completion has been notified.\"},\"DepositorFeeDivisorUpdated(uint64)\":{\"notice\":\"Emitted when a depositor fee divisor is updated.\"},\"StakeFinalized(uint256,address)\":{\"notice\":\"Emitted when a stake request is finalized.\"},\"StakeInitialized(uint256,address,address,uint16)\":{\"notice\":\"Emitted when a stake request is initialized.\"},\"StakeRecalled(uint256,address)\":{\"notice\":\"Emitted when a stake request is recalled.\"}},\"kind\":\"user\",\"methods\":{\"SATOSHI_MULTIPLIER()\":{\"notice\":\"Multiplier to convert satoshi (8 decimals precision) to tBTC         token units (18 decimals precision).\"},\"acre()\":{\"notice\":\"Acre contract.\"},\"bridge()\":{\"notice\":\"tBTC Bridge contract.\"},\"calculateDepositKey(bytes32,uint32)\":{\"notice\":\"Calculates deposit key the same way as the Bridge contract.\"},\"constructor\":{\"notice\":\"Tbtc Depositor contract constructor.\"},\"decodeExtraData(bytes32)\":{\"notice\":\"Decodes receiver address and referral from extra data,\"},\"depositorFeeDivisor()\":{\"notice\":\"Divisor used to compute the depositor fee taken from each deposit         and transferred to the treasury upon stake request finalization.\"},\"encodeExtraData(address,uint16)\":{\"notice\":\"Encode receiver address and referral as extra data.\"},\"finalizeStakeRequest(uint256)\":{\"notice\":\"This function should be called for previously initialized stake         request, after tBTC minting process completed and tBTC was deposited         in this contract.         It stakes the tBTC from the given deposit into Acre, emitting the         stBTC shares to the receiver specified in the deposit extra data         and using the referral provided in the extra data.\"},\"initializeStakeRequest((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address,uint16)\":{\"notice\":\"This function allows staking process initialization for a Bitcoin         deposit made by an user with a P2(W)SH transaction. It uses the         supplied information to reveal a deposit to the tBTC Bridge contract.\"},\"notifyBridgingCompleted(uint256)\":{\"notice\":\"This function should be called for previously initialized stake         request, after tBTC minting process completed and tBTC was deposited         in this Depositor contract.\"},\"recallStakeRequest(uint256)\":{\"notice\":\"Recall bridged tBTC tokens from being requested to stake. This         function can be called by the staker to recover tBTC that cannot         be finalized to stake in Acre contract due to a deposit limit being         reached.\"},\"stakeRequests(uint256)\":{\"notice\":\"Mapping of stake requests.\"},\"tbtcToken()\":{\"notice\":\"tBTC Token contract.\"},\"tbtcVault()\":{\"notice\":\"tBTC Vault contract.\"},\"updateDepositorFeeDivisor(uint64)\":{\"notice\":\"Updates the depositor fee divisor.\"}},\"notice\":\"The contract integrates Acre staking with tBTC minting.         User who wants to stake BTC in Acre should submit a Bitcoin transaction         to the most recently created off-chain ECDSA wallets of the tBTC Bridge         using pay-to-script-hash (P2SH) or pay-to-witness-script-hash (P2WSH)         containing hashed information about this Depositor contract address,         and staker's Ethereum address.         Then, the staker initiates tBTC minting by revealing their Ethereum         address along with their deposit blinding factor, refund public key         hash and refund locktime on the tBTC Bridge through this Depositor         contract.         The off-chain ECDSA wallet listens for these sorts of         messages and when it gets one, it checks the Bitcoin network to make         sure the deposit lines up. If it does, the off-chain ECDSA wallet         may decide to pick the deposit transaction for sweeping, and when         the sweep operation is confirmed on the Bitcoin network, the tBTC Bridge         and tBTC vault mint the tBTC token to the Depositor address.         After tBTC is minted to the Depositor, on the stake finalization         tBTC is staked in Acre contract and stBTC shares are emitted to the         receiver pointed by the staker.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tbtc/TbtcDepositor.sol\":\"TbtcDepositor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/** @title BitcoinSPV */\\n/** @author Summa (https://summa.one) */\\n\\nimport {BytesLib} from \\\"./BytesLib.sol\\\";\\nimport {SafeMath} from \\\"./SafeMath.sol\\\";\\n\\nlibrary BTCUtils {\\n    using BytesLib for bytes;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    uint256 public constant ERR_BAD_ARG = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /* ***** */\\n    /* UTILS */\\n    /* ***** */\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _flag    The first byte of a VarInt\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLength(bytes memory _flag) internal pure returns (uint8) {\\n        return determineVarIntDataLengthAt(_flag, 0);\\n    }\\n\\n    /// @notice         Determines the length of a VarInt in bytes\\n    /// @dev            A VarInt of >1 byte is prefixed with a flag indicating its length\\n    /// @param _b       The byte array containing a VarInt\\n    /// @param _at      The position of the VarInt in the array\\n    /// @return         The number of non-flag bytes in the VarInt\\n    function determineVarIntDataLengthAt(bytes memory _b, uint256 _at) internal pure returns (uint8) {\\n        if (uint8(_b[_at]) == 0xff) {\\n            return 8;  // one-byte flag, 8 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfe) {\\n            return 4;  // one-byte flag, 4 bytes data\\n        }\\n        if (uint8(_b[_at]) == 0xfd) {\\n            return 2;  // one-byte flag, 2 bytes data\\n        }\\n\\n        return 0;  // flag is data\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string starting with a VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarInt(bytes memory _b) internal pure returns (uint256, uint256) {\\n        return parseVarIntAt(_b, 0);\\n    }\\n\\n    /// @notice     Parse a VarInt into its data length and the number it represents\\n    /// @dev        Useful for Parsing Vins and Vouts. Returns ERR_BAD_ARG if insufficient bytes.\\n    ///             Caller SHOULD explicitly handle this case (or bubble it up)\\n    /// @param _b   A byte-string containing a VarInt\\n    /// @param _at  The position of the VarInt\\n    /// @return     number of bytes in the encoding (not counting the tag), the encoded int\\n    function parseVarIntAt(bytes memory _b, uint256 _at) internal pure returns (uint256, uint256) {\\n        uint8 _dataLen = determineVarIntDataLengthAt(_b, _at);\\n\\n        if (_dataLen == 0) {\\n            return (0, uint8(_b[_at]));\\n        }\\n        if (_b.length < 1 + _dataLen + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n        uint256 _number;\\n        if (_dataLen == 2) {\\n            _number = reverseUint16(uint16(_b.slice2(1 + _at)));\\n        } else if (_dataLen == 4) {\\n            _number = reverseUint32(uint32(_b.slice4(1 + _at)));\\n        } else if (_dataLen == 8) {\\n            _number = reverseUint64(uint64(_b.slice8(1 + _at)));\\n        }\\n        return (_dataLen, _number);\\n    }\\n\\n    /// @notice          Changes the endianness of a byte array\\n    /// @dev             Returns a new, backwards, bytes\\n    /// @param _b        The bytes to reverse\\n    /// @return          The reversed bytes\\n    function reverseEndianness(bytes memory _b) internal pure returns (bytes memory) {\\n        bytes memory _newValue = new bytes(_b.length);\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _newValue[_b.length - i - 1] = _b[i];\\n        }\\n\\n        return _newValue;\\n    }\\n\\n    /// @notice          Changes the endianness of a uint256\\n    /// @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint64\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint64(uint64 _b) internal pure returns (uint64 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF) |\\n            ((v & 0x00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF) |\\n            ((v & 0x0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint32\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint32(uint32 _b) internal pure returns (uint32 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF) |\\n            ((v & 0x00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint24\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint24(uint24 _b) internal pure returns (uint24 v) {\\n        v =  (_b << 16) | (_b & 0x00FF00) | (_b >> 16);\\n    }\\n\\n    /// @notice          Changes the endianness of a uint16\\n    /// @param _b        The unsigned integer to reverse\\n    /// @return v        The reversed value\\n    function reverseUint16(uint16 _b) internal pure returns (uint16 v) {\\n        v =  (_b << 8) | (_b >> 8);\\n    }\\n\\n\\n    /// @notice          Converts big-endian bytes to a uint\\n    /// @dev             Traverses the byte array and sums the bytes\\n    /// @param _b        The big-endian bytes-encoded integer\\n    /// @return          The integer representation\\n    function bytesToUint(bytes memory _b) internal pure returns (uint256) {\\n        uint256 _number;\\n\\n        for (uint i = 0; i < _b.length; i++) {\\n            _number = _number + uint8(_b[i]) * (2 ** (8 * (_b.length - (i + 1))));\\n        }\\n\\n        return _number;\\n    }\\n\\n    /// @notice          Get the last _num bytes from a byte array\\n    /// @param _b        The byte array to slice\\n    /// @param _num      The number of bytes to extract from the end\\n    /// @return          The last _num bytes of _b\\n    function lastBytes(bytes memory _b, uint256 _num) internal pure returns (bytes memory) {\\n        uint256 _start = _b.length.sub(_num);\\n\\n        return _b.slice(_start, _num);\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash160(bytes memory _b) internal pure returns (bytes memory) {\\n        return abi.encodePacked(ripemd160(abi.encodePacked(sha256(_b))));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash160 (sha2 + ripemd160)\\n    /// @dev             sha2 precompile at address(2), ripemd160 at address(3)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash160View(bytes memory _b) internal view returns (bytes20 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 3, 0x00, 32, 0x00, 32))\\n            // read from position 12 = 0c\\n            res := mload(0x0c)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             abi.encodePacked changes the return to bytes instead of bytes32\\n    /// @param _b        The pre-image\\n    /// @return          The digest\\n    function hash256(bytes memory _b) internal pure returns (bytes32) {\\n        return sha256(abi.encodePacked(sha256(_b)));\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The pre-image\\n    /// @return res      The digest\\n    function hash256View(bytes memory _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, 32), mload(_b), 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 on a pair of bytes32\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _a        The first bytes32 of the pre-image\\n    /// @param _b        The second bytes32 of the pre-image\\n    /// @return res      The digest\\n    function hash256Pair(bytes32 _a, bytes32 _b) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            mstore(0x00, _a)\\n            mstore(0x20, _b)\\n            pop(staticcall(gas(), 2, 0x00, 64, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /// @notice          Implements bitcoin's hash256 (double sha2)\\n    /// @dev             sha2 is precompiled smart contract located at address(2)\\n    /// @param _b        The array containing the pre-image\\n    /// @param at        The start of the pre-image\\n    /// @param len       The length of the pre-image\\n    /// @return res      The digest\\n    function hash256Slice(\\n        bytes memory _b,\\n        uint256 at,\\n        uint256 len\\n    ) internal view returns (bytes32 res) {\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            pop(staticcall(gas(), 2, add(_b, add(32, at)), len, 0x00, 32))\\n            pop(staticcall(gas(), 2, 0x00, 32, 0x00, 32))\\n            res := mload(0x00)\\n        }\\n    }\\n\\n    /* ************ */\\n    /* Legacy Input */\\n    /* ************ */\\n\\n    /// @notice          Extracts the nth input from the vin (0-indexed)\\n    /// @dev             Iterates over the vin. If you need to extract several, write a custom function\\n    /// @param _vin      The vin as a tightly-packed byte array\\n    /// @param _index    The 0-indexed location of the input to extract\\n    /// @return          The input as a byte array\\n    function extractInputAtIndex(bytes memory _vin, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineInputLengthAt(_vin, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n            _offset = _offset + _len;\\n        }\\n\\n        _len = determineInputLengthAt(_vin, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _vin.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Determines whether an input is legacy\\n    /// @dev             False if no scriptSig, otherwise True\\n    /// @param _input    The input\\n    /// @return          True for legacy, False for witness\\n    function isLegacyInput(bytes memory _input) internal pure returns (bool) {\\n        return _input[36] != hex\\\"00\\\";\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The LEGACY input\\n    /// @return          The length of the script sig\\n    function extractScriptSigLen(bytes memory _input) internal pure returns (uint256, uint256) {\\n        return extractScriptSigLenAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of a scriptSig in an input\\n    ///                  starting at the specified position\\n    /// @dev             Will return 0 if passed a witness input.\\n    /// @param _input    The byte array containing the LEGACY input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the script sig\\n    function extractScriptSigLenAt(bytes memory _input, uint256 _at) internal pure returns (uint256, uint256) {\\n        if (_input.length < 37 + _at) {\\n            return (ERR_BAD_ARG, 0);\\n        }\\n\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = parseVarIntAt(_input, _at + 36);\\n\\n        return (_varIntDataLen, _scriptSigLen);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The input\\n    /// @return          The length of the input in bytes\\n    function determineInputLength(bytes memory _input) internal pure returns (uint256) {\\n        return determineInputLengthAt(_input, 0);\\n    }\\n\\n    /// @notice          Determines the length of an input from its scriptSig,\\n    ///                  starting at the specified position\\n    /// @dev             36 for outpoint, 1 for scriptSig length, 4 for sequence\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input in the array\\n    /// @return          The length of the input in bytes\\n    function determineInputLengthAt(bytes memory _input, uint256 _at) internal pure returns (uint256) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLenAt(_input, _at);\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        return 36 + 1 + _varIntDataLen + _scriptSigLen + 4;\\n    }\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLELegacy(bytes memory _input) internal pure returns (bytes4) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice4(36 + 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The LEGACY input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceLegacy(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLELegacy(_input));\\n        uint32 _beSequence = reverseUint32(_leSeqence);\\n        return _beSequence;\\n    }\\n    /// @notice          Extracts the VarInt-prepended scriptSig from the input in a tx\\n    /// @dev             Will return hex\\\"00\\\" if passed a witness input\\n    /// @param _input    The LEGACY input\\n    /// @return          The length-prepended scriptSig\\n    function extractScriptSig(bytes memory _input) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _scriptSigLen;\\n        (_varIntDataLen, _scriptSigLen) = extractScriptSigLen(_input);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Bad VarInt in scriptSig\\\");\\n        return _input.slice(36, 1 + _varIntDataLen + _scriptSigLen);\\n    }\\n\\n\\n    /* ************* */\\n    /* Witness Input */\\n    /* ************* */\\n\\n    /// @notice          Extracts the LE sequence bytes from an input\\n    /// @dev             Sequence is used for relative time locks\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence bytes (LE uint)\\n    function extractSequenceLEWitness(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(37);\\n    }\\n\\n    /// @notice          Extracts the sequence from the input in a tx\\n    /// @dev             Sequence is a 4-byte little-endian number\\n    /// @param _input    The WITNESS input\\n    /// @return          The sequence number (big-endian uint)\\n    function extractSequenceWitness(bytes memory _input) internal pure returns (uint32) {\\n        uint32 _leSeqence = uint32(extractSequenceLEWitness(_input));\\n        uint32 _inputeSequence = reverseUint32(_leSeqence);\\n        return _inputeSequence;\\n    }\\n\\n    /// @notice          Extracts the outpoint from the input in a tx\\n    /// @dev             32-byte tx id with 4-byte index\\n    /// @param _input    The input\\n    /// @return          The outpoint (LE bytes of prev tx hash + LE bytes of prev tx index)\\n    function extractOutpoint(bytes memory _input) internal pure returns (bytes memory) {\\n        return _input.slice(0, 36);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    /// @dev             32-byte tx id\\n    /// @param _input    The input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLE(bytes memory _input) internal pure returns (bytes32) {\\n        return _input.slice32(0);\\n    }\\n\\n    /// @notice          Extracts the outpoint tx id from an input\\n    ///                  starting at the specified position\\n    /// @dev             32-byte tx id\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx id (little-endian bytes)\\n    function extractInputTxIdLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes32) {\\n        return _input.slice32(_at);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    /// @dev             4-byte tx index\\n    /// @param _input    The input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLE(bytes memory _input) internal pure returns (bytes4) {\\n        return _input.slice4(32);\\n    }\\n\\n    /// @notice          Extracts the LE tx input index from the input in a tx\\n    ///                  starting at the specified position\\n    /// @dev             4-byte tx index\\n    /// @param _input    The byte array containing the input\\n    /// @param _at       The position of the input\\n    /// @return          The tx index (little-endian bytes)\\n    function extractTxIndexLeAt(bytes memory _input, uint256 _at) internal pure returns (bytes4) {\\n        return _input.slice4(32 + _at);\\n    }\\n\\n    /* ****** */\\n    /* Output */\\n    /* ****** */\\n\\n    /// @notice          Determines the length of an output\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLength(bytes memory _output) internal pure returns (uint256) {\\n        return determineOutputLengthAt(_output, 0);\\n    }\\n\\n    /// @notice          Determines the length of an output\\n    ///                  starting at the specified position\\n    /// @dev             Works with any properly formatted output\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The position of the output\\n    /// @return          The length indicated by the prefix, error if invalid length\\n    function determineOutputLengthAt(bytes memory _output, uint256 _at) internal pure returns (uint256) {\\n        if (_output.length < 9 + _at) {\\n            return ERR_BAD_ARG;\\n        }\\n        uint256 _varIntDataLen;\\n        uint256 _scriptPubkeyLength;\\n        (_varIntDataLen, _scriptPubkeyLength) = parseVarIntAt(_output, 8 + _at);\\n\\n        if (_varIntDataLen == ERR_BAD_ARG) {\\n            return ERR_BAD_ARG;\\n        }\\n\\n        // 8-byte value, 1-byte for tag itself\\n        return 8 + 1 + _varIntDataLen + _scriptPubkeyLength;\\n    }\\n\\n    /// @notice          Extracts the output at a given index in the TxOuts vector\\n    /// @dev             Iterates over the vout. If you need to extract multiple, write a custom function\\n    /// @param _vout     The _vout to extract from\\n    /// @param _index    The 0-indexed location of the output to extract\\n    /// @return          The specified output\\n    function extractOutputAtIndex(bytes memory _vout, uint256 _index) internal pure returns (bytes memory) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n        require(_varIntDataLen != ERR_BAD_ARG, \\\"Read overrun during VarInt parsing\\\");\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _len = 0;\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 _i = 0; _i < _index; _i ++) {\\n            _len = determineOutputLengthAt(_vout, _offset);\\n            require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n            _offset += _len;\\n        }\\n\\n        _len = determineOutputLengthAt(_vout, _offset);\\n        require(_len != ERR_BAD_ARG, \\\"Bad VarInt in scriptPubkey\\\");\\n        return _vout.slice(_offset, _len);\\n    }\\n\\n    /// @notice          Extracts the value bytes from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value as LE bytes\\n    function extractValueLE(bytes memory _output) internal pure returns (bytes8) {\\n        return _output.slice8(0);\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The output\\n    /// @return          The output value\\n    function extractValue(bytes memory _output) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(extractValueLE(_output));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the value from the output in a tx\\n    /// @dev             Value is an 8-byte little-endian number\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output in the array\\n    /// @return          The output value\\n    function extractValueAt(bytes memory _output, uint256 _at) internal pure returns (uint64) {\\n        uint64 _leValue = uint64(_output.slice8(_at));\\n        uint64 _beValue = reverseUint64(_leValue);\\n        return _beValue;\\n    }\\n\\n    /// @notice          Extracts the data from an op return output\\n    /// @dev             Returns hex\\\"\\\" if no data or not an op return\\n    /// @param _output   The output\\n    /// @return          Any data contained in the opreturn output, null if not an op return\\n    function extractOpReturnData(bytes memory _output) internal pure returns (bytes memory) {\\n        if (_output[9] != hex\\\"6a\\\") {\\n            return hex\\\"\\\";\\n        }\\n        bytes1 _dataLen = _output[10];\\n        return _output.slice(11, uint256(uint8(_dataLen)));\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The output\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHash(bytes memory _output) internal pure returns (bytes memory) {\\n        return extractHashAt(_output, 8, _output.length - 8);\\n    }\\n\\n    /// @notice          Extracts the hash from the output script\\n    /// @dev             Determines type by the length prefix and validates format\\n    /// @param _output   The byte array containing the output\\n    /// @param _at       The starting index of the output script in the array\\n    ///                  (output start + 8)\\n    /// @param _len      The length of the output script\\n    ///                  (output length - 8)\\n    /// @return          The hash committed to by the pk_script, or null for errors\\n    function extractHashAt(\\n        bytes memory _output,\\n        uint256 _at,\\n        uint256 _len\\n    ) internal pure returns (bytes memory) {\\n        uint8 _scriptLen = uint8(_output[_at]);\\n\\n        // don't have to worry about overflow here.\\n        // if _scriptLen + 1 overflows, then output length would have to be < 1\\n        // for this check to pass. if it's < 1, then we errored when assigning\\n        // _scriptLen\\n        if (_scriptLen + 1 != _len) {\\n            return hex\\\"\\\";\\n        }\\n\\n        if (uint8(_output[_at + 1]) == 0) {\\n            if (_scriptLen < 2) {\\n                return hex\\\"\\\";\\n            }\\n            uint256 _payloadLen = uint8(_output[_at + 2]);\\n            // Check for maliciously formatted witness outputs.\\n            // No need to worry about underflow as long b/c of the `< 2` check\\n            if (_payloadLen != _scriptLen - 2 || (_payloadLen != 0x20 && _payloadLen != 0x14)) {\\n                return hex\\\"\\\";\\n            }\\n            return _output.slice(_at + 3, _payloadLen);\\n        } else {\\n            bytes3 _tag = _output.slice3(_at);\\n            // p2pkh\\n            if (_tag == hex\\\"1976a9\\\") {\\n                // Check for maliciously formatted p2pkh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + 3]) != 0x14 ||\\n                    _output.slice2(_at + _len - 2) != hex\\\"88ac\\\") {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 4, 20);\\n            //p2sh\\n            } else if (_tag == hex\\\"17a914\\\") {\\n                // Check for maliciously formatted p2sh\\n                // No need to worry about underflow, b/c of _scriptLen check\\n                if (uint8(_output[_at + _len - 1]) != 0x87) {\\n                    return hex\\\"\\\";\\n                }\\n                return _output.slice(_at + 3, 20);\\n            }\\n        }\\n        return hex\\\"\\\";  /* NB: will trigger on OPRETURN and any non-standard that doesn't overrun */\\n    }\\n\\n    /* ********** */\\n    /* Witness TX */\\n    /* ********** */\\n\\n\\n    /// @notice      Checks that the vin passed up is properly formatted\\n    /// @dev         Consider a vin with a valid vout in its scriptsig\\n    /// @param _vin  Raw bytes length-prefixed input vector\\n    /// @return      True if it represents a validly formatted vin\\n    function validateVin(bytes memory _vin) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nIns;\\n\\n        (_varIntDataLen, _nIns) = parseVarInt(_vin);\\n\\n        // Not valid if it says there are too many or no inputs\\n        if (_nIns == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vin.length) {\\n                return false;\\n            }\\n\\n            // Grab the next input and determine its length.\\n            uint256 _nextLen = determineInputLengthAt(_vin, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            // Increase the offset by that much\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vin.length;\\n    }\\n\\n    /// @notice      Checks that the vout passed up is properly formatted\\n    /// @dev         Consider a vout with a valid scriptpubkey\\n    /// @param _vout Raw bytes length-prefixed output vector\\n    /// @return      True if it represents a validly formatted vout\\n    function validateVout(bytes memory _vout) internal pure returns (bool) {\\n        uint256 _varIntDataLen;\\n        uint256 _nOuts;\\n\\n        (_varIntDataLen, _nOuts) = parseVarInt(_vout);\\n\\n        // Not valid if it says there are too many or no outputs\\n        if (_nOuts == 0 || _varIntDataLen == ERR_BAD_ARG) {\\n            return false;\\n        }\\n\\n        uint256 _offset = 1 + _varIntDataLen;\\n\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            // If we're at the end, but still expect more\\n            if (_offset >= _vout.length) {\\n                return false;\\n            }\\n\\n            // Grab the next output and determine its length.\\n            // Increase the offset by that much\\n            uint256 _nextLen = determineOutputLengthAt(_vout, _offset);\\n            if (_nextLen == ERR_BAD_ARG) {\\n                return false;\\n            }\\n\\n            _offset += _nextLen;\\n        }\\n\\n        // Returns false if we're not exactly at the end\\n        return _offset == _vout.length;\\n    }\\n\\n\\n\\n    /* ************ */\\n    /* Block Header */\\n    /* ************ */\\n\\n    /// @notice          Extracts the transaction merkle root from a block header\\n    /// @dev             Use verifyHash256Merkle to verify proofs with this root\\n    /// @param _header   The header\\n    /// @return          The merkle root (little-endian)\\n    function extractMerkleRootLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(36);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The header\\n    /// @return          The target threshold\\n    function extractTarget(bytes memory _header) internal pure returns (uint256) {\\n        return extractTargetAt(_header, 0);\\n    }\\n\\n    /// @notice          Extracts the target from a block header\\n    /// @dev             Target is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The target threshold\\n    function extractTargetAt(bytes memory _header, uint256 at) internal pure returns (uint256) {\\n        uint24 _m = uint24(_header.slice3(72 + at));\\n        uint8 _e = uint8(_header[75 + at]);\\n        uint256 _mantissa = uint256(reverseUint24(_m));\\n        uint _exponent = _e - 3;\\n\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice          Calculate difficulty from the difficulty 1 target and current target\\n    /// @dev             Difficulty 1 is 0x1d00ffff on mainnet and testnet\\n    /// @dev             Difficulty 1 is a 256-bit number encoded as a 3-byte mantissa and 1-byte exponent\\n    /// @param _target   The current target\\n    /// @return          The block difficulty (bdiff)\\n    function calculateDifficulty(uint256 _target) internal pure returns (uint256) {\\n        // Difficulty 1 calculated from 0x1d00ffff\\n        return DIFF1_TARGET.div(_target);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLE(bytes memory _header) internal pure returns (bytes32) {\\n        return _header.slice32(4);\\n    }\\n\\n    /// @notice          Extracts the previous block's hash from a block header\\n    /// @dev             Block headers do NOT include block number :(\\n    /// @param _header   The array containing the header\\n    /// @param at        The start of the header\\n    /// @return          The previous block's hash (little-endian)\\n    function extractPrevBlockLEAt(\\n        bytes memory _header,\\n        uint256 at\\n    ) internal pure returns (bytes32) {\\n        return _header.slice32(4 + at);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (little-endian bytes)\\n    function extractTimestampLE(bytes memory _header) internal pure returns (bytes4) {\\n        return _header.slice4(68);\\n    }\\n\\n    /// @notice          Extracts the timestamp from a block header\\n    /// @dev             Time is not 100% reliable\\n    /// @param _header   The header\\n    /// @return          The timestamp (uint)\\n    function extractTimestamp(bytes memory _header) internal pure returns (uint32) {\\n        return reverseUint32(uint32(extractTimestampLE(_header)));\\n    }\\n\\n    /// @notice          Extracts the expected difficulty from a block header\\n    /// @dev             Does NOT verify the work\\n    /// @param _header   The header\\n    /// @return          The difficulty as an integer\\n    function extractDifficulty(bytes memory _header) internal pure returns (uint256) {\\n        return calculateDifficulty(extractTarget(_header));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes memory _a, bytes memory _b) internal view returns (bytes32) {\\n        return hash256View(abi.encodePacked(_a, _b));\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return          The double-sha256 of the concatenated hashes\\n    function _hash256MerkleStep(bytes32 _a, bytes32 _b) internal view returns (bytes32) {\\n        return hash256Pair(_a, _b);\\n    }\\n\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Inefficient version.\\n    /// @param _proof    The proof. Tightly packed LE sha256 hashes. The last hash is the root\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(bytes memory _proof, uint _index) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_proof.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Special case for coinbase-only blocks\\n        if (_proof.length == 32) {\\n            return true;\\n        }\\n\\n        // Should never occur\\n        if (_proof.length == 64) {\\n            return false;\\n        }\\n\\n        bytes32 _root = _proof.slice32(_proof.length - 32);\\n        bytes32 _current = _proof.slice32(0);\\n        bytes memory _tree = _proof.slice(32, _proof.length - 64);\\n\\n        return verifyHash256Merkle(_current, _tree, _root, _index);\\n    }\\n\\n    /// @notice          Verifies a Bitcoin-style merkle tree\\n    /// @dev             Leaves are 0-indexed. Efficient version.\\n    /// @param _leaf     The leaf of the proof. LE sha256 hash.\\n    /// @param _tree     The intermediate nodes in the proof.\\n    ///                  Tightly packed LE sha256 hashes.\\n    /// @param _root     The root of the proof. LE sha256 hash.\\n    /// @param _index    The index of the leaf\\n    /// @return          true if the proof is valid, else false\\n    function verifyHash256Merkle(\\n        bytes32 _leaf,\\n        bytes memory _tree,\\n        bytes32 _root,\\n        uint _index\\n    ) internal view returns (bool) {\\n        // Not an even number of hashes\\n        if (_tree.length % 32 != 0) {\\n            return false;\\n        }\\n\\n        // Should never occur\\n        if (_tree.length == 0) {\\n            return false;\\n        }\\n\\n        uint _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        // i moves in increments of 32\\n        for (uint i = 0; i < _tree.length; i += 32) {\\n            if (_idx % 2 == 1) {\\n                _current = _hash256MerkleStep(_tree.slice32(i), _current);\\n            } else {\\n                _current = _hash256MerkleStep(_current, _tree.slice32(i));\\n            }\\n            _idx = _idx >> 1;\\n        }\\n        return _current == _root;\\n    }\\n\\n    /*\\n    NB: https://github.com/bitcoin/bitcoin/blob/78dae8caccd82cfbfd76557f1fb7d7557c7b5edb/src/pow.cpp#L49-L72\\n    NB: We get a full-bitlength target from this. For comparison with\\n        header-encoded targets we need to mask it with the header target\\n        e.g. (full & truncated) == truncated\\n    */\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp.sub(_firstTimestamp);\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD.div(4)) {\\n            _elapsedTime = RETARGET_PERIOD.div(4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD.mul(4)) {\\n            _elapsedTime = RETARGET_PERIOD.mul(4);\\n        }\\n\\n        /*\\n          NB: high targets e.g. ffff0020 can cause overflows here\\n              so we divide it by 256**2, then multiply by 256**2 later\\n              we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n\\n        uint256 _adjusted = _previousTarget.div(65536).mul(_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD).mul(65536);\\n    }\\n}\\n\",\"keccak256\":\"0x439eaa97e9239705f3d31e8d39dccbad32311f1f119e295d53c65e0ae3c5a5fc\"},\"@keep-network/bitcoin-spv-sol/contracts/BytesLib.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\n\\nhttps://github.com/GNSPS/solidity-bytes-utils/\\n\\nThis is free and unencumbered software released into the public domain.\\n\\nAnyone is free to copy, modify, publish, use, compile, sell, or\\ndistribute this software, either in source code form or as a compiled\\nbinary, for any purpose, commercial or non-commercial, and by any\\nmeans.\\n\\nIn jurisdictions that recognize copyright laws, the author or authors\\nof this software dedicate any and all copyright interest in the\\nsoftware to the public domain. We make this dedication for the benefit\\nof the public at large and to the detriment of our heirs and\\nsuccessors. We intend this dedication to be an overt act of\\nrelinquishment in perpetuity of all present and future rights to this\\nsoftware under copyright law.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND,\\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\\nOTHER DEALINGS IN THE SOFTWARE.\\n\\nFor more information, please refer to <https://unlicense.org>\\n*/\\n\\n\\n/** @title BytesLib **/\\n/** @author https://github.com/GNSPS **/\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n                add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                        ),\\n                        // and now shift left the number of bytes to\\n                        // leave space for the length in the slot\\n                        exp(0x100, sub(32, newlength))\\n                        ),\\n                        // increase length by the double of the memory\\n                        // bytes length\\n                        mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                    ),\\n                    and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(bytes memory _bytes, uint _start, uint _length) internal  pure returns (bytes memory res) {\\n        if (_length == 0) {\\n            return hex\\\"\\\";\\n        }\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            // Alloc bytes array with additional 32 bytes afterspace and assign it's size\\n            res := mload(0x40)\\n            mstore(0x40, add(add(res, 64), _length))\\n            mstore(res, _length)\\n\\n            // Compute distance between source and destination pointers\\n            let diff := sub(res, add(_bytes, _start))\\n\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n            } {\\n                mstore(add(src, diff), mload(src))\\n            }\\n        }\\n    }\\n\\n    /// @notice Take a slice of the byte array, overwriting the destination.\\n    /// The length of the slice will equal the length of the destination array.\\n    /// @dev Make sure the destination array has afterspace if required.\\n    /// @param _bytes The source array\\n    /// @param _dest The destination array.\\n    /// @param _start The location to start in the source array.\\n    function sliceInPlace(\\n        bytes memory _bytes,\\n        bytes memory _dest,\\n        uint _start\\n    ) internal pure {\\n        uint _length = _dest.length;\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            for {\\n                let src := add(add(_bytes, 32), _start)\\n                let res := add(_dest, 32)\\n                let end := add(src, _length)\\n            } lt(src, end) {\\n                src := add(src, 32)\\n                res := add(res, 32)\\n            } {\\n                mstore(res, mload(src))\\n            }\\n        }\\n    }\\n\\n    // Static slice functions, no bounds checking\\n    /// @notice take a 32-byte slice from the specified position\\n    function slice32(bytes memory _bytes, uint _start) internal pure returns (bytes32 res) {\\n        assembly {\\n            res := mload(add(add(_bytes, 32), _start))\\n        }\\n    }\\n\\n    /// @notice take a 20-byte slice from the specified position\\n    function slice20(bytes memory _bytes, uint _start) internal pure returns (bytes20) {\\n        return bytes20(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 8-byte slice from the specified position\\n    function slice8(bytes memory _bytes, uint _start) internal pure returns (bytes8) {\\n        return bytes8(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 4-byte slice from the specified position\\n    function slice4(bytes memory _bytes, uint _start) internal pure returns (bytes4) {\\n        return bytes4(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 3-byte slice from the specified position\\n    function slice3(bytes memory _bytes, uint _start) internal pure returns (bytes3) {\\n        return bytes3(slice32(_bytes, _start));\\n    }\\n\\n    /// @notice take a 2-byte slice from the specified position\\n    function slice2(bytes memory _bytes, uint _start) internal pure returns (bytes2) {\\n        return bytes2(slice32(_bytes, _start));\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint _start) internal  pure returns (address) {\\n        uint _totalLen = _start + 20;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Address conversion out of bounds.\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint(bytes memory _bytes, uint _start) internal  pure returns (uint256) {\\n        uint _totalLen = _start + 32;\\n        require(_totalLen > _start && _bytes.length >= _totalLen, \\\"Uint conversion out of bounds.\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function toBytes32(bytes memory _source) pure internal returns (bytes32 result) {\\n        if (_source.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(_source, 32))\\n        }\\n    }\\n\\n    function keccak256Slice(bytes memory _bytes, uint _start, uint _length) pure internal returns (bytes32 result) {\\n        uint _end = _start + _length;\\n        require(_end > _start && _bytes.length >= _end, \\\"Slice out of bounds\\\");\\n\\n        assembly {\\n            result := keccak256(add(add(_bytes, 32), _start), _length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x43e0f3b3b23c861bd031588bf410dfdd02e2af17941a89aa38d70e534e0380d1\"},\"@keep-network/bitcoin-spv-sol/contracts/SafeMath.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\n/*\\nThe MIT License (MIT)\\n\\nCopyright (c) 2016 Smart Contract Solutions, Inc.\\n\\nPermission is hereby granted, free of charge, to any person obtaining\\na copy of this software and associated documentation files (the\\n\\\"Software\\\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n*/\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n    /**\\n     * @dev Multiplies two numbers, throws on overflow.\\n     */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        c = _a * _b;\\n        require(c / _a == _b, \\\"Overflow during multiplication.\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Integer division of two numbers, truncating the quotient.\\n     */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n        // uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n        return _a / _b;\\n    }\\n\\n    /**\\n     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n     */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, \\\"Underflow during subtraction.\\\");\\n        return _a - _b;\\n    }\\n\\n    /**\\n     * @dev Adds two numbers, throws on overflow.\\n     */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n        c = _a + _b;\\n        require(c >= _a, \\\"Overflow during addition.\\\");\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0x35930d982394c7ffde439b82e5e696c5b21a6f09699d44861dfe409ef64084a3\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x207f64371bc0fcc5be86713aa5da109a870cc3a6da50e93b64ee881e369b593d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20, IERC20Metadata, ERC20} from \\\"../ERC20.sol\\\";\\nimport {SafeERC20} from \\\"../utils/SafeERC20.sol\\\";\\nimport {IERC4626} from \\\"../../../interfaces/IERC4626.sol\\\";\\nimport {Math} from \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Attempted to deposit more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxDeposit(address receiver, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to mint more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxMint(address receiver, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Attempted to withdraw more assets than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxWithdraw(address owner, uint256 assets, uint256 max);\\n\\n    /**\\n     * @dev Attempted to redeem more shares than the max amount for `receiver`.\\n     */\\n    error ERC4626ExceededMaxRedeem(address owner, uint256 shares, uint256 max);\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeCall(IERC20Metadata.decimals, ())\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Ceil);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Floor);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256) {\\n        uint256 maxAssets = maxDeposit(receiver);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxDeposit(receiver, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256) {\\n        uint256 maxShares = maxMint(receiver);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxMint(receiver, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxAssets = maxWithdraw(owner);\\n        if (assets > maxAssets) {\\n            revert ERC4626ExceededMaxWithdraw(owner, assets, maxAssets);\\n        }\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual returns (uint256) {\\n        uint256 maxShares = maxRedeem(owner);\\n        if (shares > maxShares) {\\n            revert ERC4626ExceededMaxRedeem(owner, shares, maxShares);\\n        }\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x1837547e04d5fe5334eeb77a345683c22995f1e7aa033020757ddf83a80fc72d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/Acre.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Dispatcher.sol\\\";\\n\\n/// @title Acre\\n/// @notice This contract implements the ERC-4626 tokenized vault standard. By\\n///         staking tBTC, users acquire a liquid staking token called stBTC,\\n///         commonly referred to as \\\"shares\\\". The staked tBTC is securely\\n///         deposited into Acre's vaults, where it generates yield over time.\\n///         Users have the flexibility to redeem stBTC, enabling them to\\n///         withdraw their staked tBTC along with the accrued yield.\\n/// @dev ERC-4626 is a standard to optimize and unify the technical parameters\\n///      of yield-bearing vaults. This contract facilitates the minting and\\n///      burning of shares (stBTC), which are represented as standard ERC20\\n///      tokens, providing a seamless exchange with tBTC tokens.\\ncontract Acre is ERC4626, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /// Dispatcher contract that routes tBTC from Acre to a given vault and back.\\n    Dispatcher public dispatcher;\\n\\n    /// Address of the treasury wallet, where fees should be transferred to.\\n    address public treasury;\\n\\n    /// Minimum amount for a single deposit operation. The value should be set\\n    /// low enough so the deposits routed through TbtcDepositor contract won't\\n    /// be rejected. It means that minimumDepositAmount should be lower than\\n    /// tBTC protocol's depositDustThreshold reduced by all the minting fees taken\\n    /// before depositing in the Acre contract.\\n    uint256 public minimumDepositAmount;\\n\\n    /// Maximum total amount of tBTC token held by Acre.\\n    uint256 public maximumTotalAssets;\\n\\n    /// Emitted when a referral is used.\\n    /// @param referral Used for referral program.\\n    /// @param assets Amount of tBTC tokens staked.\\n    event StakeReferral(uint16 indexed referral, uint256 assets);\\n\\n    /// Emitted when the treasury wallet address is updated.\\n    /// @param treasury New treasury wallet address.\\n    event TreasuryUpdated(address treasury);\\n\\n    /// Emitted when deposit parameters are updated.\\n    /// @param minimumDepositAmount New value of the minimum deposit amount.\\n    /// @param maximumTotalAssets New value of the maximum total assets amount.\\n    event DepositParametersUpdated(\\n        uint256 minimumDepositAmount,\\n        uint256 maximumTotalAssets\\n    );\\n\\n    /// Emitted when the dispatcher contract is updated.\\n    /// @param oldDispatcher Address of the old dispatcher contract.\\n    /// @param newDispatcher Address of the new dispatcher contract.\\n    event DispatcherUpdated(address oldDispatcher, address newDispatcher);\\n\\n    /// Reverts if the amount is less than the minimum deposit amount.\\n    /// @param amount Amount to check.\\n    /// @param min Minimum amount to check 'amount' against.\\n    error DepositAmountLessThanMin(uint256 amount, uint256 min);\\n\\n    /// Reverts if the address is zero.\\n    error ZeroAddress();\\n\\n    constructor(\\n        IERC20 _tbtc,\\n        address _treasury\\n    ) ERC4626(_tbtc) ERC20(\\\"Acre Staked Bitcoin\\\", \\\"stBTC\\\") Ownable(msg.sender) {\\n        treasury = _treasury;\\n        // TODO: Revisit the exact values closer to the launch.\\n        minimumDepositAmount = 0.001 * 1e18; // 0.001 tBTC\\n        maximumTotalAssets = 25 * 1e18; // 25 tBTC\\n    }\\n\\n    /// @notice Updates treasury wallet address.\\n    /// @param newTreasury New treasury wallet address.\\n    function updateTreasury(address newTreasury) external onlyOwner {\\n        // TODO: Introduce a parameters update process.\\n        treasury = newTreasury;\\n\\n        emit TreasuryUpdated(newTreasury);\\n    }\\n\\n    /// @notice Updates deposit parameters.\\n    /// @dev To disable the limit for deposits, set the maximum total assets to\\n    ///      maximum (`type(uint256).max`).\\n    /// @param _minimumDepositAmount New value of the minimum deposit amount. It\\n    ///        is the minimum amount for a single deposit operation.\\n    /// @param _maximumTotalAssets New value of the maximum total assets amount.\\n    ///        It is the maximum amount of the tBTC token that the Acre can\\n    ///        hold.\\n    function updateDepositParameters(\\n        uint256 _minimumDepositAmount,\\n        uint256 _maximumTotalAssets\\n    ) external onlyOwner {\\n        // TODO: Introduce a parameters update process.\\n        minimumDepositAmount = _minimumDepositAmount;\\n        maximumTotalAssets = _maximumTotalAssets;\\n\\n        emit DepositParametersUpdated(\\n            _minimumDepositAmount,\\n            _maximumTotalAssets\\n        );\\n    }\\n\\n    // TODO: Implement a governed upgrade process that initiates an update and\\n    //       then finalizes it after a delay.\\n    /// @notice Updates the dispatcher contract and gives it an unlimited\\n    ///         allowance to transfer staked tBTC.\\n    /// @param newDispatcher Address of the new dispatcher contract.\\n    function updateDispatcher(Dispatcher newDispatcher) external onlyOwner {\\n        if (address(newDispatcher) == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        address oldDispatcher = address(dispatcher);\\n\\n        emit DispatcherUpdated(oldDispatcher, address(newDispatcher));\\n        dispatcher = newDispatcher;\\n\\n        // TODO: Once withdrawal/rebalancing is implemented, we need to revoke the\\n        // approval of the vaults share tokens from the old dispatcher and approve\\n        // a new dispatcher to manage the share tokens.\\n\\n        if (oldDispatcher != address(0)) {\\n            // Setting allowance to zero for the old dispatcher\\n            IERC20(asset()).forceApprove(oldDispatcher, 0);\\n        }\\n\\n        // Setting allowance to max for the new dispatcher\\n        IERC20(asset()).forceApprove(address(dispatcher), type(uint256).max);\\n    }\\n\\n    /// @notice Mints shares to receiver by depositing exactly amount of\\n    ///         tBTC tokens.\\n    /// @dev Takes into account a deposit parameter, minimum deposit amount,\\n    ///      which determines the minimum amount for a single deposit operation.\\n    ///      The amount of the assets has to be pre-approved in the tBTC\\n    ///      contract.\\n    /// @param assets Approved amount of tBTC tokens to deposit.\\n    /// @param receiver The address to which the shares will be minted.\\n    /// @return Minted shares.\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) public override returns (uint256) {\\n        if (assets < minimumDepositAmount) {\\n            revert DepositAmountLessThanMin(assets, minimumDepositAmount);\\n        }\\n\\n        return super.deposit(assets, receiver);\\n    }\\n\\n    /// @notice Mints shares to receiver by depositing tBTC tokens.\\n    /// @dev Takes into account a deposit parameter, minimum deposit amount,\\n    ///      which determines the minimum amount for a single deposit operation.\\n    ///      The amount of the assets has to be pre-approved in the tBTC\\n    ///      contract.\\n    /// @param shares Amount of shares to mint. To get the amount of share use\\n    ///        `previewMint`.\\n    /// @param receiver The address to which the shares will be minted.\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) public override returns (uint256 assets) {\\n        if ((assets = super.mint(shares, receiver)) < minimumDepositAmount) {\\n            revert DepositAmountLessThanMin(assets, minimumDepositAmount);\\n        }\\n    }\\n\\n    /// @notice Stakes a given amount of tBTC token and mints shares to a\\n    ///         receiver.\\n    /// @dev This function calls `deposit` function from `ERC4626` contract. The\\n    ///      amount of the assets has to be pre-approved in the tBTC contract.\\n    /// @param assets Approved amount for the transfer and stake.\\n    /// @param receiver The address to which the shares will be minted.\\n    /// @param referral Data used for referral program.\\n    /// @return shares Minted shares.\\n    function stake(\\n        uint256 assets,\\n        address receiver,\\n        uint16 referral\\n    ) public returns (uint256) {\\n        // TODO: revisit the type of referral.\\n        uint256 shares = deposit(assets, receiver);\\n\\n        if (referral > 0) {\\n            emit StakeReferral(referral, assets);\\n        }\\n\\n        return shares;\\n    }\\n\\n    /// @notice Returns the maximum amount of the tBTC token that can be\\n    ///         deposited into the vault for the receiver, through a deposit\\n    ///         call. It takes into account the deposit parameter, maximum total\\n    ///         assets, which determines the total amount of tBTC token held by\\n    ///         Acre.\\n    /// @return The maximum amount of the tBTC token.\\n    function maxDeposit(address) public view override returns (uint256) {\\n        if (maximumTotalAssets == type(uint256).max) {\\n            return type(uint256).max;\\n        }\\n\\n        uint256 _totalAssets = totalAssets();\\n\\n        return\\n            _totalAssets >= maximumTotalAssets\\n                ? 0\\n                : maximumTotalAssets - _totalAssets;\\n    }\\n\\n    /// @notice Returns the maximum amount of the vault shares that can be\\n    ///         minted for the receiver, through a mint call.\\n    /// @dev Since the Acre contract limits the maximum total tBTC tokens this\\n    ///      function converts the maximum deposit amount to shares.\\n    /// @return The maximum amount of the vault shares.\\n    function maxMint(address receiver) public view override returns (uint256) {\\n        uint256 _maxDeposit = maxDeposit(receiver);\\n\\n        // slither-disable-next-line incorrect-equality\\n        return\\n            _maxDeposit == type(uint256).max\\n                ? type(uint256).max\\n                : convertToShares(_maxDeposit);\\n    }\\n\\n    /// @return Returns deposit parameters.\\n    function depositParameters() public view returns (uint256, uint256) {\\n        return (minimumDepositAmount, maximumTotalAssets);\\n    }\\n}\\n\",\"keccak256\":\"0x1dd27f9025a2c14653e938184ff39a571c1daeff3a6c42756e0433f9bb233052\",\"license\":\"GPL-3.0-only\"},\"contracts/Dispatcher.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport \\\"./Router.sol\\\";\\nimport \\\"./Acre.sol\\\";\\n\\n/// @title Dispatcher\\n/// @notice Dispatcher is a contract that routes tBTC from Acre (stBTC) to\\n///         yield vaults and back. Vaults supply yield strategies with tBTC that\\n///         generate yield for Bitcoin holders.\\ncontract Dispatcher is Router, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /// Struct holds information about a vault.\\n    struct VaultInfo {\\n        bool authorized;\\n    }\\n\\n    /// The main Acre contract holding tBTC deposited by stakers.\\n    Acre public immutable acre;\\n    /// tBTC token contract.\\n    IERC20 public immutable tbtc;\\n    /// Address of the maintainer bot.\\n    address public maintainer;\\n\\n    /// Authorized Yield Vaults that implement ERC4626 standard. These\\n    /// vaults deposit assets to yield strategies, e.g. Uniswap V3\\n    /// WBTC/TBTC pool. Vault can be a part of Acre ecosystem or can be\\n    /// implemented externally. As long as it complies with ERC4626\\n    /// standard and is authorized by the owner it can be plugged into\\n    /// Acre.\\n    address[] public vaults;\\n    /// Mapping of vaults to their information.\\n    mapping(address => VaultInfo) public vaultsInfo;\\n\\n    /// Emitted when a vault is authorized.\\n    /// @param vault Address of the vault.\\n    event VaultAuthorized(address indexed vault);\\n\\n    /// Emitted when a vault is deauthorized.\\n    /// @param vault Address of the vault.\\n    event VaultDeauthorized(address indexed vault);\\n\\n    /// Emitted when tBTC is routed to a vault.\\n    /// @param vault Address of the vault.\\n    /// @param amount Amount of tBTC.\\n    /// @param sharesOut Amount of shares received by Acre.\\n    event DepositAllocated(\\n        address indexed vault,\\n        uint256 amount,\\n        uint256 sharesOut\\n    );\\n\\n    /// Emitted when the maintainer address is updated.\\n    /// @param maintainer Address of the new maintainer.\\n    event MaintainerUpdated(address indexed maintainer);\\n\\n    /// Reverts if the vault is already authorized.\\n    error VaultAlreadyAuthorized();\\n\\n    /// Reverts if the vault is not authorized.\\n    error VaultUnauthorized();\\n\\n    /// Reverts if the caller is not the maintainer.\\n    error NotMaintainer();\\n\\n    /// Reverts if the address is zero.\\n    error ZeroAddress();\\n\\n    /// Modifier that reverts if the caller is not the maintainer.\\n    modifier onlyMaintainer() {\\n        if (msg.sender != maintainer) {\\n            revert NotMaintainer();\\n        }\\n        _;\\n    }\\n\\n    constructor(Acre _acre, IERC20 _tbtc) Ownable(msg.sender) {\\n        acre = _acre;\\n        tbtc = _tbtc;\\n    }\\n\\n    /// @notice Adds a vault to the list of authorized vaults.\\n    /// @param vault Address of the vault to add.\\n    function authorizeVault(address vault) external onlyOwner {\\n        if (isVaultAuthorized(vault)) {\\n            revert VaultAlreadyAuthorized();\\n        }\\n\\n        vaults.push(vault);\\n        vaultsInfo[vault].authorized = true;\\n\\n        emit VaultAuthorized(vault);\\n    }\\n\\n    /// @notice Removes a vault from the list of authorized vaults.\\n    /// @param vault Address of the vault to remove.\\n    function deauthorizeVault(address vault) external onlyOwner {\\n        if (!isVaultAuthorized(vault)) {\\n            revert VaultUnauthorized();\\n        }\\n\\n        vaultsInfo[vault].authorized = false;\\n\\n        for (uint256 i = 0; i < vaults.length; i++) {\\n            if (vaults[i] == vault) {\\n                vaults[i] = vaults[vaults.length - 1];\\n                // slither-disable-next-line costly-loop\\n                vaults.pop();\\n                break;\\n            }\\n        }\\n\\n        emit VaultDeauthorized(vault);\\n    }\\n\\n    /// @notice Updates the maintainer address.\\n    /// @param newMaintainer Address of the new maintainer.\\n    function updateMaintainer(address newMaintainer) external onlyOwner {\\n        if (newMaintainer == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        maintainer = newMaintainer;\\n\\n        emit MaintainerUpdated(maintainer);\\n    }\\n\\n    /// TODO: make this function internal once the allocation distribution is\\n    /// implemented\\n    /// @notice Routes tBTC from Acre to a vault. Can be called by the maintainer\\n    ///         only.\\n    /// @param vault Address of the vault to route the assets to.\\n    /// @param amount Amount of tBTC to deposit.\\n    /// @param minSharesOut Minimum amount of shares to receive by Acre.\\n    function depositToVault(\\n        address vault,\\n        uint256 amount,\\n        uint256 minSharesOut\\n    ) public onlyMaintainer {\\n        if (!isVaultAuthorized(vault)) {\\n            revert VaultUnauthorized();\\n        }\\n\\n        // slither-disable-next-line arbitrary-send-erc20\\n        tbtc.safeTransferFrom(address(acre), address(this), amount);\\n        tbtc.forceApprove(address(vault), amount);\\n\\n        uint256 sharesOut = deposit(\\n            IERC4626(vault),\\n            address(acre),\\n            amount,\\n            minSharesOut\\n        );\\n        // slither-disable-next-line reentrancy-events\\n        emit DepositAllocated(vault, amount, sharesOut);\\n    }\\n\\n    /// @notice Returns the list of authorized vaults.\\n    function getVaults() public view returns (address[] memory) {\\n        return vaults;\\n    }\\n\\n    /// @notice Returns true if the vault is authorized.\\n    /// @param vault Address of the vault to check.\\n    function isVaultAuthorized(address vault) public view returns (bool) {\\n        return vaultsInfo[vault].authorized;\\n    }\\n\\n    /// TODO: implement redeem() / withdraw() functions\\n}\\n\",\"keccak256\":\"0x9255b1386a60b14af0692980cc1a92dc067216371ee9ad18fc7e8182c9f4d72c\",\"license\":\"GPL-3.0-only\"},\"contracts/Router.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\n/// @title Router\\n/// @notice Router is a contract that routes tBTC from stBTC (Acre) to\\n///         a given vault and back. Vaults supply yield strategies with tBTC that\\n///         generate yield for Bitcoin holders.\\nabstract contract Router {\\n    /// Thrown when amount of shares received is below the min set by caller.\\n    /// @param vault Address of the vault.\\n    /// @param sharesOut Amount of shares received by Acre.\\n    /// @param minSharesOut Minimum amount of shares expected to receive.\\n    error MinSharesError(\\n        address vault,\\n        uint256 sharesOut,\\n        uint256 minSharesOut\\n    );\\n\\n    /// @notice Routes funds from stBTC (Acre) to a vault. The amount of tBTC to\\n    ///         Shares of deposited tBTC are minted to the stBTC contract.\\n    /// @param vault Address of the vault to route the funds to.\\n    /// @param receiver Address of the receiver of the shares.\\n    /// @param amount Amount of tBTC to deposit.\\n    /// @param minSharesOut Minimum amount of shares to receive.\\n    function deposit(\\n        IERC4626 vault,\\n        address receiver,\\n        uint256 amount,\\n        uint256 minSharesOut\\n    ) internal returns (uint256 sharesOut) {\\n        if ((sharesOut = vault.deposit(amount, receiver)) < minSharesOut) {\\n            revert MinSharesError(address(vault), sharesOut, minSharesOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc701393595512bfc95a6090101cf303211adcedc059478cf7c6d1a8bd6b4e4df\",\"license\":\"GPL-3.0-only\"},\"contracts/external/tbtc/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.21;\\n\\n// This file defines an interface based on the Bridge contract. It defines functions\\n// from the external source contract that are used in this repository.\\n// Source:\\n// https://github.com/keep-network/tbtc-v2/blob/a78cc16e3521a6339f1c27891bb1ad60b9202406/solidity/contracts/bridge/Bridge.sol\\n//\\n// TODO: Update after the released version with a commit hash after PR is merged\\n// https://github.com/keep-network/tbtc-v2/pull/760 and released.\\n\\n/// @title Bitcoin Bridge\\n/// @notice Bridge manages BTC deposit and redemption flow and is increasing and\\n///         decreasing balances in the Bank as a result of BTC deposit and\\n///         redemption operations performed by depositors and redeemers.\\n///\\n///         Depositors send BTC funds to the most recently created off-chain\\n///         ECDSA wallet of the bridge using pay-to-script-hash (P2SH) or\\n///         pay-to-witness-script-hash (P2WSH) containing hashed information\\n///         about the depositor\\u2019s Ethereum address. Then, the depositor reveals\\n///         their Ethereum address along with their deposit blinding factor,\\n///         refund public key hash and refund locktime to the Bridge on Ethereum\\n///         chain. The off-chain ECDSA wallet listens for these sorts of\\n///         messages and when it gets one, it checks the Bitcoin network to make\\n///         sure the deposit lines up. If it does, the off-chain ECDSA wallet\\n///         may decide to pick the deposit transaction for sweeping, and when\\n///         the sweep operation is confirmed on the Bitcoin network, the ECDSA\\n///         wallet informs the Bridge about the sweep increasing appropriate\\n///         balances in the Bank.\\n/// @dev Bridge is an upgradeable component of the Bank. The order of\\n///      functionalities in this contract is: deposit, sweep, redemption,\\n///      moving funds, wallet lifecycle, frauds, parameters.\\ninterface IBridge {\\n    /// @notice Represents Bitcoin transaction data.\\n    struct BitcoinTxInfo {\\n        /// @notice Bitcoin transaction version.\\n        /// @dev `version` from raw Bitcoin transaction data.\\n        ///      Encoded as 4-bytes signed integer, little endian.\\n        bytes4 version;\\n        /// @notice All Bitcoin transaction inputs, prepended by the number of\\n        ///         transaction inputs.\\n        /// @dev `tx_in_count | tx_in` from raw Bitcoin transaction data.\\n        ///\\n        ///      The number of transaction inputs encoded as compactSize\\n        ///      unsigned integer, little-endian.\\n        ///\\n        ///      Note that some popular block explorers reverse the order of\\n        ///      bytes from `outpoint`'s `hash` and display it as big-endian.\\n        ///      Solidity code of Bridge expects hashes in little-endian, just\\n        ///      like they are represented in a raw Bitcoin transaction.\\n        bytes inputVector;\\n        /// @notice All Bitcoin transaction outputs prepended by the number of\\n        ///         transaction outputs.\\n        /// @dev `tx_out_count | tx_out` from raw Bitcoin transaction data.\\n        ///\\n        ///       The number of transaction outputs encoded as a compactSize\\n        ///       unsigned integer, little-endian.\\n        bytes outputVector;\\n        /// @notice Bitcoin transaction locktime.\\n        ///\\n        /// @dev `lock_time` from raw Bitcoin transaction data.\\n        ///      Encoded as 4-bytes unsigned integer, little endian.\\n        bytes4 locktime;\\n        // This struct doesn't contain `__gap` property as the structure is not\\n        // stored, it is used as a function's calldata argument.\\n    }\\n\\n    /// @notice Represents data which must be revealed by the depositor during\\n    ///         deposit reveal.\\n    struct DepositRevealInfo {\\n        // Index of the funding output belonging to the funding transaction.\\n        uint32 fundingOutputIndex;\\n        // The blinding factor as 8 bytes. Byte endianness doesn't matter\\n        // as this factor is not interpreted as uint. The blinding factor allows\\n        // to distinguish deposits from the same depositor.\\n        bytes8 blindingFactor;\\n        // The compressed Bitcoin public key (33 bytes and 02 or 03 prefix)\\n        // of the deposit's wallet hashed in the HASH160 Bitcoin opcode style.\\n        bytes20 walletPubKeyHash;\\n        // The compressed Bitcoin public key (33 bytes and 02 or 03 prefix)\\n        // that can be used to make the deposit refund after the refund\\n        // locktime passes. Hashed in the HASH160 Bitcoin opcode style.\\n        bytes20 refundPubKeyHash;\\n        // The refund locktime (4-byte LE). Interpreted according to locktime\\n        // parsing rules described in:\\n        // https://developer.bitcoin.org/devguide/transactions.html#locktime-and-sequence-number\\n        // and used with OP_CHECKLOCKTIMEVERIFY opcode as described in:\\n        // https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki\\n        bytes4 refundLocktime;\\n        // Address of the Bank vault to which the deposit is routed to.\\n        // Optional, can be 0x0. The vault must be trusted by the Bridge.\\n        address vault;\\n    }\\n\\n    /// @notice Represents tBTC deposit request data.\\n    struct DepositRequest {\\n        // Ethereum depositor address.\\n        address depositor;\\n        // Deposit amount in satoshi.\\n        uint64 amount;\\n        // UNIX timestamp the deposit was revealed at.\\n        // XXX: Unsigned 32-bit int unix seconds, will break February 7th 2106.\\n        uint32 revealedAt;\\n        // Address of the Bank vault the deposit is routed to.\\n        // Optional, can be 0x0.\\n        address vault;\\n        // Treasury TBTC fee in satoshi at the moment of deposit reveal.\\n        uint64 treasuryFee;\\n        // UNIX timestamp the deposit was swept at. Note this is not the\\n        // time when the deposit was swept on the Bitcoin chain but actually\\n        // the time when the sweep proof was delivered to the Ethereum chain.\\n        // XXX: Unsigned 32-bit int unix seconds, will break February 7th 2106.\\n        uint32 sweptAt;\\n        // The 32-byte deposit extra data. Optional, can be bytes32(0).\\n        bytes32 extraData;\\n        // This struct doesn't contain `__gap` property as the structure is stored\\n        // in a mapping, mappings store values in different slots and they are\\n        // not contiguous with other values.\\n    }\\n\\n    /// @notice Sibling of the `revealDeposit` function. This function allows\\n    ///         to reveal a P2(W)SH Bitcoin deposit with 32-byte extra data\\n    ///         embedded in the deposit script. The extra data allows to\\n    ///         attach additional context to the deposit. For example,\\n    ///         it allows a third-party smart contract to reveal the\\n    ///         deposit on behalf of the original depositor and provide\\n    ///         additional services once the deposit is handled. In this\\n    ///         case, the address of the original depositor can be encoded\\n    ///         as extra data.\\n    /// @param fundingTx Bitcoin funding transaction data, see `BitcoinTx.Info`.\\n    /// @param reveal Deposit reveal data, see `RevealInfo struct.\\n    /// @param extraData 32-byte deposit extra data.\\n    /// @dev Requirements:\\n    ///      - All requirements from `revealDeposit` function must be met,\\n    ///      - `extraData` must not be bytes32(0),\\n    ///      - `extraData` must be the actual extra data used in the P2(W)SH\\n    ///        BTC deposit transaction.\\n    ///\\n    ///      If any of these requirements is not met, the wallet _must_ refuse\\n    ///      to sweep the deposit and the depositor has to wait until the\\n    ///      deposit script unlocks to receive their BTC back.\\n    function revealDepositWithExtraData(\\n        BitcoinTxInfo calldata fundingTx,\\n        DepositRevealInfo calldata reveal,\\n        bytes32 extraData\\n    ) external;\\n\\n    /// @notice Collection of all revealed deposits indexed by\\n    ///         keccak256(fundingTxHash | fundingOutputIndex).\\n    ///         The fundingTxHash is bytes32 (ordered as in Bitcoin internally)\\n    ///         and fundingOutputIndex an uint32. This mapping may contain valid\\n    ///         and invalid deposits and the wallet is responsible for\\n    ///         validating them before attempting to execute a sweep.\\n    function deposits(\\n        uint256 depositKey\\n    ) external view returns (DepositRequest memory);\\n\\n    /// @notice Returns the current values of Bridge deposit parameters.\\n    /// @return depositDustThreshold The minimal amount that can be requested\\n    ///         to deposit. Value of this parameter must take into account the\\n    ///         value of `depositTreasuryFeeDivisor` and `depositTxMaxFee`\\n    ///         parameters in order to make requests that can incur the\\n    ///         treasury and transaction fee and still satisfy the depositor.\\n    /// @return depositTreasuryFeeDivisor Divisor used to compute the treasury\\n    ///         fee taken from each deposit and transferred to the treasury upon\\n    ///         sweep proof submission. That fee is computed as follows:\\n    ///         `treasuryFee = depositedAmount / depositTreasuryFeeDivisor`\\n    ///         For example, if the treasury fee needs to be 2% of each deposit,\\n    ///         the `depositTreasuryFeeDivisor` should be set to `50`\\n    ///         because `1/50 = 0.02 = 2%`.\\n    /// @return depositTxMaxFee Maximum amount of BTC transaction fee that can\\n    ///         be incurred by each swept deposit being part of the given sweep\\n    ///         transaction. If the maximum BTC transaction fee is exceeded,\\n    ///         such transaction is considered a fraud.\\n    /// @return depositRevealAheadPeriod Defines the length of the period that\\n    ///         must be preserved between the deposit reveal time and the\\n    ///         deposit refund locktime. For example, if the deposit become\\n    ///         refundable on August 1st, and the ahead period is 7 days, the\\n    ///         latest moment for deposit reveal is July 25th. Value in seconds.\\n    function depositParameters()\\n        external\\n        view\\n        returns (\\n            uint64 depositDustThreshold,\\n            uint64 depositTreasuryFeeDivisor,\\n            uint64 depositTxMaxFee,\\n            uint32 depositRevealAheadPeriod\\n        );\\n}\\n\",\"keccak256\":\"0x133ddde5726d842fd806d2335525edeadfb11e1a5d33e680c8fc23d2cc9f2133\",\"license\":\"GPL-3.0-only\"},\"contracts/external/tbtc/ITBTCVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.21;\\n\\n// This file defines an interface based on the TBTCVault contract. It defines functions\\n// from the external source contract that are used in this repository.\\n// Source:\\n// https://github.com/keep-network/tbtc-v2/blob/a78cc16e3521a6339f1c27891bb1ad60b9202406/solidity/contracts/vault/TBTCVault.sol\\n//\\n// TODO: Update after the released version with a commit hash after PR is merged\\n// https://github.com/keep-network/tbtc-v2/pull/760 and released.\\n\\n/// @title TBTC application vault\\n/// @notice TBTC is a fully Bitcoin-backed ERC-20 token pegged to the price of\\n///         Bitcoin. It facilitates Bitcoin holders to act on the Ethereum\\n///         blockchain and access the decentralized finance (DeFi) ecosystem.\\n///         TBTC Vault mints and unmints TBTC based on Bitcoin balances in the\\n///         Bank.\\n/// @dev TBTC Vault is the owner of TBTC token contract and is the only contract\\n///      minting the token.\\ninterface ITBTCVault {\\n    // Represents optimistic minting request for the given deposit revealed\\n    // to the Bridge.\\n    struct OptimisticMintingRequest {\\n        // UNIX timestamp at which the optimistic minting was requested.\\n        uint64 requestedAt;\\n        // UNIX timestamp at which the optimistic minting was finalized.\\n        // 0 if not yet finalized.\\n        uint64 finalizedAt;\\n    }\\n\\n    /// @notice Collection of all revealed deposits for which the optimistic\\n    ///         minting was requested. Indexed by a deposit key computed as\\n    ///         `keccak256(fundingTxHash | fundingOutputIndex)`.\\n    function optimisticMintingRequests(\\n        uint256 depositKey\\n    ) external returns (OptimisticMintingRequest memory);\\n\\n    /// @notice Divisor used to compute the treasury fee taken from each\\n    ///         optimistically minted deposit and transferred to the treasury\\n    ///         upon finalization of the optimistic mint. This fee is computed\\n    ///         as follows: `fee = amount / optimisticMintingFeeDivisor`.\\n    ///         For example, if the fee needs to be 2%, the\\n    ///         `optimisticMintingFeeDivisor` should be set to `50` because\\n    ///         `1/50 = 0.02 = 2%`.\\n    ///         The optimistic minting fee does not replace the deposit treasury\\n    ///         fee cut by the Bridge. The optimistic fee is a percentage AFTER\\n    ///         the treasury fee is cut:\\n    ///         `optimisticMintingFee = (depositAmount - treasuryFee) / optimisticMintingFeeDivisor`\\n    function optimisticMintingFeeDivisor() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0xb7b544f2c69f9a419a80b2c6b5c569be80eb617772f8cde3ee25c1d123913f23\",\"license\":\"GPL-3.0-only\"},\"contracts/tbtc/TbtcDepositor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.21;\\n\\nimport {BTCUtils} from \\\"@keep-network/bitcoin-spv-sol/contracts/BTCUtils.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport {IBridge} from \\\"../external/tbtc/IBridge.sol\\\";\\nimport {ITBTCVault} from \\\"../external/tbtc/ITBTCVault.sol\\\";\\nimport {Acre} from \\\"../Acre.sol\\\";\\n\\n// TODO: Add Missfund token protection.\\n// TODO: Make Upgradable\\n\\n/// @title tBTC Depositor contract.\\n/// @notice The contract integrates Acre staking with tBTC minting.\\n///         User who wants to stake BTC in Acre should submit a Bitcoin transaction\\n///         to the most recently created off-chain ECDSA wallets of the tBTC Bridge\\n///         using pay-to-script-hash (P2SH) or pay-to-witness-script-hash (P2WSH)\\n///         containing hashed information about this Depositor contract address,\\n///         and staker's Ethereum address.\\n///         Then, the staker initiates tBTC minting by revealing their Ethereum\\n///         address along with their deposit blinding factor, refund public key\\n///         hash and refund locktime on the tBTC Bridge through this Depositor\\n///         contract.\\n///         The off-chain ECDSA wallet listens for these sorts of\\n///         messages and when it gets one, it checks the Bitcoin network to make\\n///         sure the deposit lines up. If it does, the off-chain ECDSA wallet\\n///         may decide to pick the deposit transaction for sweeping, and when\\n///         the sweep operation is confirmed on the Bitcoin network, the tBTC Bridge\\n///         and tBTC vault mint the tBTC token to the Depositor address.\\n///         After tBTC is minted to the Depositor, on the stake finalization\\n///         tBTC is staked in Acre contract and stBTC shares are emitted to the\\n///         receiver pointed by the staker.\\ncontract TbtcDepositor is Ownable {\\n    using BTCUtils for bytes;\\n    using SafeERC20 for IERC20;\\n\\n    struct StakeRequest {\\n        // UNIX timestamp at which the deposit request was initialized.\\n        uint64 requestedAt;\\n        // UNIX timestamp at which the deposit request was finalized.\\n        // 0 if not yet finalized.\\n        uint64 finalizedAt;\\n        // Maximum tBTC Deposit Transaction Fee snapshotted from the Bridge\\n        // contract at the moment of deposit reveal.\\n        uint64 tbtcDepositTxMaxFee;\\n        // tBTC Optimistic Minting Fee Divisor snapshotted from the TBTC Vault\\n        // contract at the moment of deposit reveal.\\n        uint32 tbtcOptimisticMintingFeeDivisor;\\n        // tBTC token amount to stake after deducting tBTC minting fees and the\\n        // Depositor fee.\\n        uint256 amountToStake;\\n    }\\n\\n    /// @notice tBTC Bridge contract.\\n    IBridge public bridge;\\n    /// @notice tBTC Vault contract.\\n    ITBTCVault public tbtcVault;\\n    /// @notice tBTC Token contract.\\n    IERC20 public immutable tbtcToken;\\n    /// @notice Acre contract.\\n    Acre public acre;\\n\\n    /// @notice Mapping of stake requests.\\n    /// @dev The key is a deposit key computed in the same way as in tBTC Bridge:\\n    ///      `keccak256(fundingTxHash | fundingOutputIndex)`.\\n    mapping(uint256 => StakeRequest) public stakeRequests;\\n\\n    /// @notice Multiplier to convert satoshi (8 decimals precision) to tBTC\\n    ///         token units (18 decimals precision).\\n    uint256 public constant SATOSHI_MULTIPLIER = 10 ** 10;\\n\\n    /// @notice Divisor used to compute the depositor fee taken from each deposit\\n    ///         and transferred to the treasury upon stake request finalization.\\n    /// @dev That fee is computed as follows:\\n    ///      `depositorFee = depositedAmount / depositorFeeDivisor`\\n    ///       for example, if the depositor fee needs to be 2% of each deposit,\\n    ///       the `depositorFeeDivisor` should be set to `50` because\\n    ///       `1/50 = 0.02 = 2%`.\\n    uint64 public depositorFeeDivisor;\\n\\n    /// @notice Emitted when a stake request is initialized.\\n    /// @dev Deposit details can be fetched from {{ Bridge.DepositRevealed }}\\n    ///      event emitted in the same transaction.\\n    /// @param depositKey Deposit identifier.\\n    /// @param caller Address that initialized the stake request.\\n    /// @param receiver The address to which the stBTC shares will be minted.\\n    /// @param referral Data used for referral program.\\n    event StakeInitialized(\\n        uint256 indexed depositKey,\\n        address indexed caller,\\n        address receiver,\\n        uint16 referral\\n    );\\n\\n    /// @notice Emitted when bridging completion has been notified.\\n    /// @param depositKey Deposit identifier.\\n    /// @param caller Address that notified about bridging completion.\\n    /// @param amountToStake Amount of tBTC token that is available to stake.\\n    event BridgingCompleted(\\n        uint256 indexed depositKey,\\n        address indexed caller,\\n        uint256 amountToStake\\n    );\\n\\n    /// @notice Emitted when a stake request is finalized.\\n    /// @dev Deposit details can be fetched from {{ ERC4626.Deposit }}\\n    ///      event emitted in the same transaction.\\n    /// @param depositKey Deposit identifier.\\n    /// @param caller Address that finalized the stake request.\\n    event StakeFinalized(uint256 indexed depositKey, address indexed caller);\\n\\n    /// @notice Emitted when a stake request is recalled.\\n    /// @param depositKey Deposit identifier.\\n    /// @param caller Address that called the function to recall the stake.\\n    event StakeRecalled(uint256 indexed depositKey, address indexed caller);\\n\\n    /// @notice Emitted when a depositor fee divisor is updated.\\n    /// @param depositorFeeDivisor New value of the depositor fee divisor.\\n    event DepositorFeeDivisorUpdated(uint64 depositorFeeDivisor);\\n\\n    /// @dev Receiver address is zero.\\n    error ReceiverIsZeroAddress();\\n\\n    /// @dev Attempted to initiate a stake request that was already initialized.\\n    error StakeRequestAlreadyInProgress();\\n\\n    /// @dev Attempted to finalize a stake request that has not been initialized.\\n    error StakeRequestNotInitialized();\\n\\n    /// @dev Attempted to notify about completed bridging while the notification\\n    ///      was already submitted.\\n    error BridgingAlreadyCompleted();\\n\\n    /// @dev Attempted to finalize a stake request, while bridging completion has\\n    /// not been notified yet.\\n    error BridgingNotCompleted();\\n\\n    /// @dev Attempted to finalize a stake request that was already finalized.\\n    error StakeRequestAlreadyFinalized();\\n\\n    /// @dev Attempted to call function by an account that is not the receiver.\\n    error CallerNotReceiver();\\n\\n    /// @dev Depositor address stored in the Deposit Request in the tBTC Bridge\\n    ///      contract doesn't match the current contract address.\\n    error UnexpectedDepositor(address bridgeDepositRequestDepositor);\\n\\n    /// @dev Vault address stored in the Deposit Request in the tBTC Bridge\\n    ///      contract doesn't match the expected tBTC Vault contract address.\\n    error UnexpectedTbtcVault(address bridgeDepositRequestVault);\\n\\n    /// @dev Deposit was not completed on the tBTC side and tBTC was not minted\\n    ///      to the depositor contract. It is thrown when the deposit neither has\\n    ///      been optimistically minted nor swept.\\n    error TbtcDepositNotCompleted();\\n\\n    /// @notice Tbtc Depositor contract constructor.\\n    /// @param _bridge tBTC Bridge contract instance.\\n    /// @param _tbtcVault tBTC Vault contract instance.\\n    /// @param _acre Acre contract instance.\\n    constructor(\\n        IBridge _bridge,\\n        ITBTCVault _tbtcVault,\\n        IERC20 _tbtcToken,\\n        Acre _acre\\n    ) Ownable(msg.sender) {\\n        bridge = _bridge;\\n        tbtcVault = _tbtcVault;\\n        tbtcToken = _tbtcToken;\\n        acre = _acre;\\n\\n        depositorFeeDivisor = 0; // Depositor fee is disabled initially.\\n    }\\n\\n    /// @notice This function allows staking process initialization for a Bitcoin\\n    ///         deposit made by an user with a P2(W)SH transaction. It uses the\\n    ///         supplied information to reveal a deposit to the tBTC Bridge contract.\\n    /// @dev Requirements:\\n    ///      - `reveal.walletPubKeyHash` must identify a `Live` wallet,\\n    ///      - `reveal.vault` must be 0x0 or point to a trusted vault,\\n    ///      - `reveal.fundingOutputIndex` must point to the actual P2(W)SH\\n    ///        output of the BTC deposit transaction,\\n    ///      - `reveal.blindingFactor` must be the blinding factor used in the\\n    ///        P2(W)SH BTC deposit transaction,\\n    ///      - `reveal.walletPubKeyHash` must be the wallet pub key hash used in\\n    ///        the P2(W)SH BTC deposit transaction,\\n    ///      - `reveal.refundPubKeyHash` must be the refund pub key hash used in\\n    ///        the P2(W)SH BTC deposit transaction,\\n    ///      - `reveal.refundLocktime` must be the refund locktime used in the\\n    ///        P2(W)SH BTC deposit transaction,\\n    ///      - `receiver` must be the receiver address used in the P2(W)SH BTC\\n    ///        deposit transaction as part of the extra data.\\n    ///      - `referral` must be the referral info used in the P2(W)SH BTC\\n    ///        deposit transaction as part of the extra data.\\n    ///      - BTC deposit for the given `fundingTxHash`, `fundingOutputIndex`\\n    ///        can be revealed only one time.\\n    ///\\n    ///      If any of these requirements is not met, the wallet _must_ refuse\\n    ///      to sweep the deposit and the depositor has to wait until the\\n    ///      deposit script unlocks to receive their BTC back.\\n    /// @param fundingTx Bitcoin funding transaction data, see `IBridge.BitcoinTxInfo`.\\n    /// @param reveal Deposit reveal data, see `IBridge.DepositRevealInfo`.\\n    /// @param receiver The address to which the stBTC shares will be minted.\\n    /// @param referral Data used for referral program.\\n    function initializeStakeRequest(\\n        IBridge.BitcoinTxInfo calldata fundingTx,\\n        IBridge.DepositRevealInfo calldata reveal,\\n        address receiver,\\n        uint16 referral\\n    ) external {\\n        // Check if Vault revealed to the tBTC Bridge contract matches the\\n        // tBTC Vault supported by this contract.\\n        if (reveal.vault != address(tbtcVault))\\n            revert UnexpectedTbtcVault(reveal.vault);\\n\\n        if (receiver == address(0)) revert ReceiverIsZeroAddress();\\n\\n        // Calculate Bitcoin transaction hash.\\n        bytes32 fundingTxHash = abi\\n            .encodePacked(\\n                fundingTx.version,\\n                fundingTx.inputVector,\\n                fundingTx.outputVector,\\n                fundingTx.locktime\\n            )\\n            .hash256View();\\n\\n        uint256 depositKey = calculateDepositKey(\\n            fundingTxHash,\\n            reveal.fundingOutputIndex\\n        );\\n        StakeRequest storage request = stakeRequests[depositKey];\\n\\n        if (request.requestedAt > 0) revert StakeRequestAlreadyInProgress();\\n\\n        emit StakeInitialized(depositKey, msg.sender, receiver, referral);\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        request.requestedAt = uint64(block.timestamp);\\n\\n        // Reveal the deposit to tBTC Bridge contract.\\n        bridge.revealDepositWithExtraData(\\n            fundingTx,\\n            reveal,\\n            encodeExtraData(receiver, referral)\\n        );\\n\\n        // Snapshot parameters required for fee calculation.\\n        (, , request.tbtcDepositTxMaxFee, ) = bridge.depositParameters();\\n        request.tbtcOptimisticMintingFeeDivisor = tbtcVault\\n            .optimisticMintingFeeDivisor();\\n\\n        // Get deposit details from tBTC Bridge contract.\\n        IBridge.DepositRequest memory bridgeDepositRequest = bridge.deposits(\\n            depositKey\\n        );\\n\\n        // Check if Depositor revealed to the tBTC Bridge contract matches the\\n        // current contract address.\\n        // This is very unlikely scenario, that would require unexpected change or\\n        // bug in tBTC Bridge contract, as the depositor is set automatically\\n        // to the reveal deposit message sender, which will be this contract.\\n        // Anyway we check if the depositor that got the tBTC tokens minted\\n        // is this contract, before we stake them.\\n        if (bridgeDepositRequest.depositor != address(this))\\n            revert UnexpectedDepositor(bridgeDepositRequest.depositor);\\n    }\\n\\n    /// @notice This function should be called for previously initialized stake\\n    ///         request, after tBTC minting process completed and tBTC was deposited\\n    ///         in this Depositor contract.\\n    /// @dev It calculates the amount to stake in Acre contract by deducting\\n    ///      tBTC protocol minting fee and the Depositor fee from the initial\\n    ///      funding transaction amount.\\n    ///\\n    ///      The tBTC protocol minting fee is calculated depending on the process\\n    ///      the tBTC was minted in:\\n    ///      - for swept deposits:\\n    ///        `amount = depositAmount - depositTreasuryFee - depositTxMaxFee`\\n    ///      - for optimistically minted deposits:\\n    ///        ```\\n    ///        amount = depositAmount - depositTreasuryFee - depositTxMaxFee\\n    ///               - optimisticMintingFee\\n    ///        ```\\n    ///      These calculation are simplified and can leave some positive\\n    ///      imbalance in the Depositor contract.\\n    ///      - depositTxMaxFee - this is a maximum transaction fee that can be deducted\\n    ///        on Bitcoin transaction sweeping,\\n    ///      - optimisticMintingFee - this is a optimistic minting fee snapshotted\\n    ///        at the moment of the deposit reveal, there is a chance that the fee\\n    ///        parameter is updated in the tBTC Vault contract before the optimistic\\n    ///        minting is finalized.\\n    ///      The imbalance is left in the tBTC Depositor contract.\\n    ///\\n    ///      The Depositor fee is computed based on the `depositorFeeDivisor`\\n    ///      parameter. The fee is transferred to the treasury wallet on the\\n    ///      stake request finalization.\\n    /// @param depositKey Deposit key computed as\\n    ///                   `keccak256(fundingTxHash | fundingOutputIndex)`.\\n    function notifyBridgingCompleted(uint256 depositKey) public {\\n        StakeRequest storage request = stakeRequests[depositKey];\\n\\n        if (request.requestedAt == 0) revert StakeRequestNotInitialized();\\n        if (request.amountToStake > 0) revert BridgingAlreadyCompleted();\\n\\n        // Get deposit details from tBTC Bridge and Vault contracts.\\n        IBridge.DepositRequest memory bridgeDepositRequest = bridge.deposits(\\n            depositKey\\n        );\\n        ITBTCVault.OptimisticMintingRequest\\n            memory optimisticMintingRequest = tbtcVault\\n                .optimisticMintingRequests(depositKey);\\n\\n        // Extract funding transaction amount sent by the user in Bitcoin transaction.\\n        uint256 fundingTxAmountSat = bridgeDepositRequest.amount;\\n\\n        // Estimate tBTC protocol fees for minting.\\n        uint256 tbtcMintingFeesSat = bridgeDepositRequest.treasuryFee +\\n            request.tbtcDepositTxMaxFee;\\n\\n        // Check if deposit was optimistically minted.\\n        if (optimisticMintingRequest.finalizedAt > 0) {\\n            // For tBTC minted with optimistic minting process additional fee\\n            // is taken. The fee is calculated on `TBTCVault.finalizeOptimisticMint`\\n            // call, and not stored in the contract.\\n            // There is a possibility the fee has changed since the snapshot of\\n            // the `tbtcOptimisticMintingFeeDivisor`, to cover this scenario\\n            // we want to assume the bigger fee, so we use the smaller divisor.\\n            uint256 optimisticMintingFeeDivisor = Math.min(\\n                request.tbtcOptimisticMintingFeeDivisor,\\n                tbtcVault.optimisticMintingFeeDivisor()\\n            );\\n\\n            uint256 optimisticMintingFee = optimisticMintingFeeDivisor > 0\\n                ? (fundingTxAmountSat / optimisticMintingFeeDivisor)\\n                : 0;\\n\\n            tbtcMintingFeesSat += optimisticMintingFee;\\n        } else {\\n            // If the deposit wasn't optimistically minted check if it was swept.\\n            if (bridgeDepositRequest.sweptAt == 0)\\n                revert TbtcDepositNotCompleted();\\n        }\\n\\n        // Compute depositor fee.\\n        uint256 depositorFeeTbtc = depositorFeeDivisor > 0\\n            ? (fundingTxAmountSat / depositorFeeDivisor) * SATOSHI_MULTIPLIER\\n            : 0;\\n\\n        // Calculate tBTC amount available to stake after subtracting all the fees.\\n        // Convert amount in satoshi to tBTC token precision.\\n        request.amountToStake =\\n            (fundingTxAmountSat - tbtcMintingFeesSat) *\\n            SATOSHI_MULTIPLIER -\\n            depositorFeeTbtc;\\n\\n        emit BridgingCompleted(depositKey, msg.sender, request.amountToStake);\\n\\n        // Transfer depositor fee to the treasury wallet.\\n        if (depositorFeeTbtc > 0) {\\n            tbtcToken.safeTransfer(acre.treasury(), depositorFeeTbtc);\\n        }\\n    }\\n\\n    /// @notice This function should be called for previously initialized stake\\n    ///         request, after tBTC minting process completed and tBTC was deposited\\n    ///         in this contract.\\n    ///         It stakes the tBTC from the given deposit into Acre, emitting the\\n    ///         stBTC shares to the receiver specified in the deposit extra data\\n    ///         and using the referral provided in the extra data.\\n    /// @dev This function is expected to be called after `notifyBridgingCompleted`.\\n    ///      In case the call to `Acre.stake` function fails (e.g. because of the\\n    ///      maximum deposit limit being reached), the function should be retried\\n    ///      after the limit is increased or other user withdraws their funds\\n    ///      from Acre contract to make place for another deposit.\\n    ///      The staker has a possibility to submit `recallStakeRequest` that\\n    ///      will withdraw the minted tBTC token and abort staking in Acre contract.\\n    /// @param depositKey Deposit key computed as\\n    ///                   `keccak256(fundingTxHash | fundingOutputIndex)`.\\n    function finalizeStakeRequest(uint256 depositKey) public {\\n        StakeRequest storage request = stakeRequests[depositKey];\\n\\n        if (request.amountToStake == 0) revert BridgingNotCompleted();\\n        if (request.finalizedAt > 0) revert StakeRequestAlreadyFinalized();\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        request.finalizedAt = uint64(block.timestamp);\\n\\n        // Get deposit details from tBTC Bridge.\\n        IBridge.DepositRequest memory bridgeDepositRequest = bridge.deposits(\\n            depositKey\\n        );\\n\\n        // Fetch receiver and referral stored in extra data in tBTC Bridge Deposit.\\n        // Request.\\n        bytes32 extraData = bridgeDepositRequest.extraData;\\n        (address receiver, uint16 referral) = decodeExtraData(extraData);\\n\\n        emit StakeFinalized(depositKey, msg.sender);\\n\\n        // Stake tBTC in Acre.\\n        tbtcToken.safeIncreaseAllowance(address(acre), request.amountToStake);\\n        acre.stake(request.amountToStake, receiver, referral);\\n    }\\n\\n    /// @notice Recall bridged tBTC tokens from being requested to stake. This\\n    ///         function can be called by the staker to recover tBTC that cannot\\n    ///         be finalized to stake in Acre contract due to a deposit limit being\\n    ///         reached.\\n    /// @dev This function can be called only after bridging in tBTC Bridge was\\n    ///      completed. Only receiver provided in the extra data of the stake\\n    ///      request can call this function.\\n    /// @param depositKey Deposit key computed as\\n    ///                   `keccak256(fundingTxHash | fundingOutputIndex)`.\\n    function recallStakeRequest(uint256 depositKey) external {\\n        StakeRequest storage request = stakeRequests[depositKey];\\n\\n        if (request.amountToStake == 0) revert BridgingNotCompleted();\\n        if (request.finalizedAt > 0) revert StakeRequestAlreadyFinalized();\\n\\n        // solhint-disable-next-line not-rely-on-time\\n        request.finalizedAt = uint64(block.timestamp);\\n\\n        // Get deposit details from tBTC Bridge and Vault contracts.\\n        IBridge.DepositRequest memory bridgeDepositRequest = bridge.deposits(\\n            depositKey\\n        );\\n\\n        // Fetch receiver and referral stored in extra data in tBTC Bridge Deposit.\\n        // Request.\\n        bytes32 extraData = bridgeDepositRequest.extraData;\\n        (address receiver, ) = decodeExtraData(extraData);\\n\\n        // Check if caller is the receiver.\\n        if (msg.sender != receiver) revert CallerNotReceiver();\\n\\n        emit StakeRecalled(depositKey, msg.sender);\\n\\n        tbtcToken.safeTransfer(receiver, request.amountToStake);\\n    }\\n\\n    /// @notice Updates the depositor fee divisor.\\n    /// @param newDepositorFeeDivisor New depositor fee divisor value.\\n    function updateDepositorFeeDivisor(\\n        uint64 newDepositorFeeDivisor\\n    ) external onlyOwner {\\n        // TODO: Introduce a parameters update process.\\n        depositorFeeDivisor = newDepositorFeeDivisor;\\n\\n        emit DepositorFeeDivisorUpdated(newDepositorFeeDivisor);\\n    }\\n\\n    // TODO: Handle minimum deposit amount in tBTC Bridge vs Acre.\\n\\n    /// @notice Calculates deposit key the same way as the Bridge contract.\\n    /// @dev The deposit key is computed as\\n    ///      `keccak256(fundingTxHash | fundingOutputIndex)`.\\n    /// @param fundingTxHash Bitcoin transaction hash (ordered as in Bitcoin internally)\\n    /// @param fundingOutputIndex Output in Bitcoin transaction used to fund\\n    ///        the deposit.\\n    /// @return Calculated Deposit Key.\\n    function calculateDepositKey(\\n        bytes32 fundingTxHash,\\n        uint32 fundingOutputIndex\\n    ) public pure returns (uint256) {\\n        return\\n            uint256(\\n                keccak256(abi.encodePacked(fundingTxHash, fundingOutputIndex))\\n            );\\n    }\\n\\n    /// @notice Encode receiver address and referral as extra data.\\n    /// @dev Packs the data to bytes32: 20 bytes of receiver address and\\n    ///      2 bytes of referral, 10 bytes of trailing zeros.\\n    /// @param receiver The address to which the stBTC shares will be minted.\\n    /// @param referral Data used for referral program.\\n    /// @return Encoded extra data.\\n    function encodeExtraData(\\n        address receiver,\\n        uint16 referral\\n    ) public pure returns (bytes32) {\\n        return bytes32(abi.encodePacked(receiver, referral));\\n    }\\n\\n    /// @notice Decodes receiver address and referral from extra data,\\n    /// @dev Unpacks the data from bytes32: 20 bytes of receiver address and\\n    ///      2 bytes of referral, 10 bytes of trailing zeros.\\n    /// @param extraData Encoded extra data.\\n    /// @return receiver The address to which the stBTC shares will be minted.\\n    /// @return referral Data used for referral program.\\n    function decodeExtraData(\\n        bytes32 extraData\\n    ) public pure returns (address receiver, uint16 referral) {\\n        // First 20 bytes of extra data is receiver address.\\n        receiver = address(uint160(bytes20(extraData)));\\n        // Next 2 bytes of extra data is referral info.\\n        referral = uint16(bytes2(extraData << (8 * 20)));\\n    }\\n}\\n\",\"keccak256\":\"0x8d40a4e0b1ce355ab098a66ab8e3152dae1ab4b96e04a92cd550b99d6f7f5eaa\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200205f3803806200205f833981016040819052620000349162000129565b33806200005b57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200006681620000c0565b50600180546001600160a01b039586166001600160a01b031991821617909155600280549486169482169490941790935590831660805260038054919093169116179055600580546001600160401b031916905562000191565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200012657600080fd5b50565b600080600080608085870312156200014057600080fd5b84516200014d8162000110565b6020860151909450620001608162000110565b6040860151909350620001738162000110565b6060860151909250620001868162000110565b939692955090935050565b608051611e9d620001c26000396000818161034a015281816104f301528181610a300152610cc10152611e9d6000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b2578063d782027311610081578063e5d3d71411610066578063e5d3d71414610345578063e78cea921461036c578063f2fde38b1461037f57600080fd5b8063d78202731461031f578063db59fe6b1461033257600080fd5b80638da5cb5b14610238578063c143d67514610249578063c7ba034714610276578063d0714ad51461028257600080fd5b80633647b20511610109578063715018a6116100ee578063715018a6146101da578063774e2e90146101e25780637cea86891461022557600080fd5b80633647b205146101b45780633d11a6ae146101c757600080fd5b80630e8491c51461013b5780630f36403a14610150578063124f65bd146101805780631dc2004d146101a1575b600080fd5b61014e6101493660046116ef565b610392565b005b600254610163906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019361018e36600461171a565b6105c6565b604051908152602001610177565b61014e6101af3660046116ef565b610613565b61014e6101c2366004611760565b610a57565b6101936101d53660046117b4565b610ab5565b61014e610b22565b6102036101f03660046116ef565b606081901c9160509190911c61ffff1690565b604080516001600160a01b03909316835261ffff909116602083015201610177565b61014e6102333660046116ef565b610b36565b6000546001600160a01b0316610163565b60055461025d9067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610177565b6101936402540be40081565b6102df6102903660046116ef565b6004602052600090815260409020805460019091015467ffffffffffffffff80831692680100000000000000008104821692600160801b820490921691600160c01b90910463ffffffff169085565b6040805167ffffffffffffffff96871681529486166020860152929094169183019190915263ffffffff166060820152608081019190915260a001610177565b61014e61032d3660046117e9565b610cf0565b600354610163906001600160a01b031681565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b600154610163906001600160a01b031681565b61014e61038d36600461186d565b611174565b600081815260046020526040812060018101549091036103c557604051632f3d137560e11b815260040160405180910390fd5b805468010000000000000000900467ffffffffffffffff16156103fb57604051631960824560e01b815260040160405180910390fd5b80546fffffffffffffffff00000000000000001916680100000000000000004267ffffffffffffffff1602178155600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa158015610473573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049791906118a0565b60c081015160405191925090606082901c9061ffff605084901c1690339087907fea168eab4508566481958c778e30bd01debfbf7a9763958991206456338b413990600090a3600354600186015461051d916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929116906111cb565b60035460018601546040517fdc8c4ffe00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b03848116602483015261ffff841660448301529091169063dc8c4ffe906064016020604051808303816000875af1158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd9190611962565b50505050505050565b600082826040516020016105f192919091825260e01b6001600160e01b031916602082015260240190565b6040516020818303038152906040528051906020012060001c90505b92915050565b60008181526004602052604081208054909167ffffffffffffffff9091169003610669576040517f9344bf7500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001810154156106a5576040517ffeb8632c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071391906118a0565b6002546040517f6c626aa4000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b0390911690636c626aa49060240160408051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a0919061197b565b60208301518454608085015192935067ffffffffffffffff918216926000926107d192600160801b900416906119fe565b602084015167ffffffffffffffff918216925016156108ac578454600254604080516309b53f5160e01b8152905160009361087b93600160c01b90910463ffffffff16926001600160a01b03909116916309b53f51916004808201926020929091908290030181865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190611a26565b63ffffffff16611274565b9050600080821161088d576000610897565b6108978285611a43565b90506108a38184611a65565b925050506108f0565b8360a0015163ffffffff166000036108f0576040517fd566433100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460009067ffffffffffffffff1661090b576000610933565b6005546402540be400906109299067ffffffffffffffff1685611a43565b6109339190611a78565b9050806402540be4006109468486611a8f565b6109509190611a78565b61095a9190611a8f565b60018701819055604051908152339088907fec5dcb5d8f2d1eef802fa5b2919b7de78434863012ed4ed8527500c7bd82fbc49060200160405180910390a380156105bd57600354604080517f61d027b300000000000000000000000000000000000000000000000000000000815290516105bd926001600160a01b0316916361d027b39160048083019260209291908290030181865afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190611aa2565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908361128a565b610a5f611303565b6005805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527f53a618edd6eab9ce346f438670ebd45da60fa3d85662375fae2b8beadf08faf39060200160405180910390a150565b6040516bffffffffffffffffffffffff19606084901b1660208201527fffff00000000000000000000000000000000000000000000000000000000000060f083901b166034820152600090603601604051602081830303815290604052610b1b90611abf565b9392505050565b610b2a611303565b610b346000611349565b565b60008181526004602052604081206001810154909103610b6957604051632f3d137560e11b815260040160405180910390fd5b805468010000000000000000900467ffffffffffffffff1615610b9f57604051631960824560e01b815260040160405180910390fd5b80546fffffffffffffffff00000000000000001916680100000000000000004267ffffffffffffffff1602178155600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906118a0565b60c0810151909150606081901c338114610c81576040517f93f2d2aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051339086907ff06fc5cd0523877538b1c085017ddd21143e7bd1f929f279fd990bbd6ac9b90190600090a36001840154610ce9906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690839061128a565b5050505050565b6002546001600160a01b0316610d0c60c0850160a0860161186d565b6001600160a01b031614610d6d57610d2a60c0840160a0850161186d565b6040517f25f80d2b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b6001600160a01b038216610dad576040517f80f67d2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e12610dbf6020870187611afe565b610dcc6020880188611b19565b610dd960408a018a611b19565b610de960808c0160608d01611afe565b604051602001610dfe96959493929190611b67565b6040516020818303038152906040526113b1565b90506000610e278261018e6020880188611ba9565b600081815260046020526040902080549192509067ffffffffffffffff1615610e7c576040517fc565102c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516001600160a01b038716815261ffff86166020820152339184917fadc36767cebbd5ffe68cd8d2d9584982b0ffe1e9a2257fc75f465e893c847a8e910160405180910390a3805467ffffffffffffffff19164267ffffffffffffffff161781556001546001600160a01b03166386f014398888610efd8989610ab5565b6040518463ffffffff1660e01b8152600401610f1b93929190611c52565b600060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b50505050600160009054906101000a90046001600160a01b03166001600160a01b031663c42b64d06040518163ffffffff1660e01b8152600401608060405180830381865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc49190611db7565b50835467ffffffffffffffff909116600160801b027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff9091161783555050600254604080516309b53f5160e01b815290516001600160a01b03909216916309b53f51916004808201926020929091908290030181865afa15801561104c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110709190611a26565b815463ffffffff91909116600160c01b027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909116178155600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111691906118a0565b80519091506001600160a01b0316301461116a5780516040517f251231680000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610d64565b5050505050505050565b61117c611303565b6001600160a01b0381166111bf576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610d64565b6111c881611349565b50565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611962565b905061126e84846112698585611a65565b6113d8565b50505050565b60008183106112835781610b1b565b5090919050565b6040516001600160a01b038381166024830152604482018390526112fe91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611492565b505050565b6000546001600160a01b03163314610b34576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610d64565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020600083516020850160025afa50602060006020600060025afa5050600051919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611457848261150e565b61126e576040516001600160a01b0384811660248301526000604483015261148c91869182169063095ea7b3906064016112b7565b61126e84825b60006114a76001600160a01b038416836115b6565b905080516000141580156114cc5750808060200190518101906114ca9190611e16565b155b156112fe576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610d64565b6000806000846001600160a01b03168460405161152b9190611e38565b6000604051808303816000865af19150503d8060008114611568576040519150601f19603f3d011682016040523d82523d6000602084013e61156d565b606091505b50915091508180156115975750805115806115975750808060200190518101906115979190611e16565b80156115ad57506000856001600160a01b03163b115b95945050505050565b6060610b1b8383600084600080856001600160a01b031684866040516115dc9190611e38565b60006040518083038185875af1925050503d8060008114611619576040519150601f19603f3d011682016040523d82523d6000602084013e61161e565b606091505b509150915061162e868383611638565b9695505050505050565b60608261164d57611648826116ad565b610b1b565b815115801561166457506001600160a01b0384163b155b156116a6576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610d64565b5080610b1b565b8051156116bd5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561170157600080fd5b5035919050565b63ffffffff811681146111c857600080fd5b6000806040838503121561172d57600080fd5b82359150602083013561173f81611708565b809150509250929050565b67ffffffffffffffff811681146111c857600080fd5b60006020828403121561177257600080fd5b8135610b1b8161174a565b6001600160a01b03811681146111c857600080fd5b803561179d8161177d565b919050565b803561ffff8116811461179d57600080fd5b600080604083850312156117c757600080fd5b82356117d28161177d565b91506117e0602084016117a2565b90509250929050565b60008060008084860361012081121561180157600080fd5b853567ffffffffffffffff81111561181857600080fd5b86016080818903121561182a57600080fd5b945060c0601f198201121561183e57600080fd5b5060208501925060e08501356118538161177d565b915061186261010086016117a2565b905092959194509250565b60006020828403121561187f57600080fd5b8135610b1b8161177d565b805161179d8161174a565b805161179d81611708565b600060e082840312156118b257600080fd5b60405160e0810181811067ffffffffffffffff821117156118e357634e487b7160e01b600052604160045260246000fd5b60405282516118f18161177d565b815260208301516119018161174a565b6020820152604083015161191481611708565b604082015260608301516119278161177d565b60608201526119386080840161188a565b608082015261194960a08401611895565b60a082015260c083015160c08201528091505092915050565b60006020828403121561197457600080fd5b5051919050565b60006040828403121561198d57600080fd5b6040516040810181811067ffffffffffffffff821117156119be57634e487b7160e01b600052604160045260246000fd5b60405282516119cc8161174a565b815260208301516119dc8161174a565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff818116838216019080821115611a1f57611a1f6119e8565b5092915050565b600060208284031215611a3857600080fd5b8151610b1b81611708565b600082611a6057634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561060d5761060d6119e8565b808202811582820484141761060d5761060d6119e8565b8181038181111561060d5761060d6119e8565b600060208284031215611ab457600080fd5b8151610b1b8161177d565b80516020808301519190811015611ae0576000198160200360031b1b821691505b50919050565b80356001600160e01b03198116811461179d57600080fd5b600060208284031215611b1057600080fd5b610b1b82611ae6565b6000808335601e19843603018112611b3057600080fd5b83018035915067ffffffffffffffff821115611b4b57600080fd5b602001915036819003821315611b6057600080fd5b9250929050565b60006001600160e01b03198089168352868860048501378683016004810160008152868882375093169390920160048101939093525050600801949350505050565b600060208284031215611bbb57600080fd5b8135610b1b81611708565b6000808335601e19843603018112611bdd57600080fd5b830160208101925035905067ffffffffffffffff811115611bfd57600080fd5b803603821315611b6057600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b80356bffffffffffffffffffffffff198116811461179d57600080fd5b60006101008083526001600160e01b031980611c6d88611ae6565b1682850152611c7f6020880188611bc6565b92506080610120860152611c9861018086018483611c0c565b925050611ca86040880188611bc6565b85840360ff1901610140870152611cc0848284611c0c565b9350505080611cd160608901611ae6565b166101608501525090508335611ce681611708565b63ffffffff811660208401525060208401357fffffffffffffffff0000000000000000000000000000000000000000000000008116808214611d2757600080fd5b80604085015250506bffffffffffffffffffffffff19611d4960408601611c35565b166060830152611d5b60608501611c35565b6bffffffffffffffffffffffff198116608084015250611d7d60808501611ae6565b6001600160e01b0319811660a084015250611d9a60a08501611792565b6001600160a01b031660c083015260e09091019190915292915050565b60008060008060808587031215611dcd57600080fd5b8451611dd88161174a565b6020860151909450611de98161174a565b6040860151909350611dfa8161174a565b6060860151909250611e0b81611708565b939692955090935050565b600060208284031215611e2857600080fd5b81518015158114610b1b57600080fd5b6000825160005b81811015611e595760208186018101518583015201611e3f565b50600092019182525091905056fea264697066735822122002c7eb32e3904e28b17f5a021bf7537d2555b9fcc11539ff0c2e43648f0c778a64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101365760003560e01c80638da5cb5b116100b2578063d782027311610081578063e5d3d71411610066578063e5d3d71414610345578063e78cea921461036c578063f2fde38b1461037f57600080fd5b8063d78202731461031f578063db59fe6b1461033257600080fd5b80638da5cb5b14610238578063c143d67514610249578063c7ba034714610276578063d0714ad51461028257600080fd5b80633647b20511610109578063715018a6116100ee578063715018a6146101da578063774e2e90146101e25780637cea86891461022557600080fd5b80633647b205146101b45780633d11a6ae146101c757600080fd5b80630e8491c51461013b5780630f36403a14610150578063124f65bd146101805780631dc2004d146101a1575b600080fd5b61014e6101493660046116ef565b610392565b005b600254610163906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019361018e36600461171a565b6105c6565b604051908152602001610177565b61014e6101af3660046116ef565b610613565b61014e6101c2366004611760565b610a57565b6101936101d53660046117b4565b610ab5565b61014e610b22565b6102036101f03660046116ef565b606081901c9160509190911c61ffff1690565b604080516001600160a01b03909316835261ffff909116602083015201610177565b61014e6102333660046116ef565b610b36565b6000546001600160a01b0316610163565b60055461025d9067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610177565b6101936402540be40081565b6102df6102903660046116ef565b6004602052600090815260409020805460019091015467ffffffffffffffff80831692680100000000000000008104821692600160801b820490921691600160c01b90910463ffffffff169085565b6040805167ffffffffffffffff96871681529486166020860152929094169183019190915263ffffffff166060820152608081019190915260a001610177565b61014e61032d3660046117e9565b610cf0565b600354610163906001600160a01b031681565b6101637f000000000000000000000000000000000000000000000000000000000000000081565b600154610163906001600160a01b031681565b61014e61038d36600461186d565b611174565b600081815260046020526040812060018101549091036103c557604051632f3d137560e11b815260040160405180910390fd5b805468010000000000000000900467ffffffffffffffff16156103fb57604051631960824560e01b815260040160405180910390fd5b80546fffffffffffffffff00000000000000001916680100000000000000004267ffffffffffffffff1602178155600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa158015610473573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049791906118a0565b60c081015160405191925090606082901c9061ffff605084901c1690339087907fea168eab4508566481958c778e30bd01debfbf7a9763958991206456338b413990600090a3600354600186015461051d916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116929116906111cb565b60035460018601546040517fdc8c4ffe00000000000000000000000000000000000000000000000000000000815260048101919091526001600160a01b03848116602483015261ffff841660448301529091169063dc8c4ffe906064016020604051808303816000875af1158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd9190611962565b50505050505050565b600082826040516020016105f192919091825260e01b6001600160e01b031916602082015260240190565b6040516020818303038152906040528051906020012060001c90505b92915050565b60008181526004602052604081208054909167ffffffffffffffff9091169003610669576040517f9344bf7500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001810154156106a5576040517ffeb8632c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071391906118a0565b6002546040517f6c626aa4000000000000000000000000000000000000000000000000000000008152600481018690529192506000916001600160a01b0390911690636c626aa49060240160408051808303816000875af115801561077c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a0919061197b565b60208301518454608085015192935067ffffffffffffffff918216926000926107d192600160801b900416906119fe565b602084015167ffffffffffffffff918216925016156108ac578454600254604080516309b53f5160e01b8152905160009361087b93600160c01b90910463ffffffff16926001600160a01b03909116916309b53f51916004808201926020929091908290030181865afa15801561084c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108709190611a26565b63ffffffff16611274565b9050600080821161088d576000610897565b6108978285611a43565b90506108a38184611a65565b925050506108f0565b8360a0015163ffffffff166000036108f0576040517fd566433100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460009067ffffffffffffffff1661090b576000610933565b6005546402540be400906109299067ffffffffffffffff1685611a43565b6109339190611a78565b9050806402540be4006109468486611a8f565b6109509190611a78565b61095a9190611a8f565b60018701819055604051908152339088907fec5dcb5d8f2d1eef802fa5b2919b7de78434863012ed4ed8527500c7bd82fbc49060200160405180910390a380156105bd57600354604080517f61d027b300000000000000000000000000000000000000000000000000000000815290516105bd926001600160a01b0316916361d027b39160048083019260209291908290030181865afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190611aa2565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016908361128a565b610a5f611303565b6005805467ffffffffffffffff191667ffffffffffffffff83169081179091556040519081527f53a618edd6eab9ce346f438670ebd45da60fa3d85662375fae2b8beadf08faf39060200160405180910390a150565b6040516bffffffffffffffffffffffff19606084901b1660208201527fffff00000000000000000000000000000000000000000000000000000000000060f083901b166034820152600090603601604051602081830303815290604052610b1b90611abf565b9392505050565b610b2a611303565b610b346000611349565b565b60008181526004602052604081206001810154909103610b6957604051632f3d137560e11b815260040160405180910390fd5b805468010000000000000000900467ffffffffffffffff1615610b9f57604051631960824560e01b815260040160405180910390fd5b80546fffffffffffffffff00000000000000001916680100000000000000004267ffffffffffffffff1602178155600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa158015610c17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3b91906118a0565b60c0810151909150606081901c338114610c81576040517f93f2d2aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051339086907ff06fc5cd0523877538b1c085017ddd21143e7bd1f929f279fd990bbd6ac9b90190600090a36001840154610ce9906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690839061128a565b5050505050565b6002546001600160a01b0316610d0c60c0850160a0860161186d565b6001600160a01b031614610d6d57610d2a60c0840160a0850161186d565b6040517f25f80d2b0000000000000000000000000000000000000000000000000000000081526001600160a01b0390911660048201526024015b60405180910390fd5b6001600160a01b038216610dad576040517f80f67d2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e12610dbf6020870187611afe565b610dcc6020880188611b19565b610dd960408a018a611b19565b610de960808c0160608d01611afe565b604051602001610dfe96959493929190611b67565b6040516020818303038152906040526113b1565b90506000610e278261018e6020880188611ba9565b600081815260046020526040902080549192509067ffffffffffffffff1615610e7c576040517fc565102c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516001600160a01b038716815261ffff86166020820152339184917fadc36767cebbd5ffe68cd8d2d9584982b0ffe1e9a2257fc75f465e893c847a8e910160405180910390a3805467ffffffffffffffff19164267ffffffffffffffff161781556001546001600160a01b03166386f014398888610efd8989610ab5565b6040518463ffffffff1660e01b8152600401610f1b93929190611c52565b600060405180830381600087803b158015610f3557600080fd5b505af1158015610f49573d6000803e3d6000fd5b50505050600160009054906101000a90046001600160a01b03166001600160a01b031663c42b64d06040518163ffffffff1660e01b8152600401608060405180830381865afa158015610fa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc49190611db7565b50835467ffffffffffffffff909116600160801b027fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff9091161783555050600254604080516309b53f5160e01b815290516001600160a01b03909216916309b53f51916004808201926020929091908290030181865afa15801561104c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110709190611a26565b815463ffffffff91909116600160c01b027fffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff909116178155600154604051630b02c43d60e41b8152600481018490526000916001600160a01b03169063b02c43d09060240160e060405180830381865afa1580156110f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111691906118a0565b80519091506001600160a01b0316301461116a5780516040517f251231680000000000000000000000000000000000000000000000000000000081526001600160a01b039091166004820152602401610d64565b5050505050505050565b61117c611303565b6001600160a01b0381166111bf576040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260006004820152602401610d64565b6111c881611349565b50565b6040517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0383811660248301526000919085169063dd62ed3e90604401602060405180830381865afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611962565b905061126e84846112698585611a65565b6113d8565b50505050565b60008183106112835781610b1b565b5090919050565b6040516001600160a01b038381166024830152604482018390526112fe91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611492565b505050565b6000546001600160a01b03163314610b34576040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152602401610d64565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020600083516020850160025afa50602060006020600060025afa5050600051919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b300000000000000000000000000000000000000000000000000000000179052611457848261150e565b61126e576040516001600160a01b0384811660248301526000604483015261148c91869182169063095ea7b3906064016112b7565b61126e84825b60006114a76001600160a01b038416836115b6565b905080516000141580156114cc5750808060200190518101906114ca9190611e16565b155b156112fe576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610d64565b6000806000846001600160a01b03168460405161152b9190611e38565b6000604051808303816000865af19150503d8060008114611568576040519150601f19603f3d011682016040523d82523d6000602084013e61156d565b606091505b50915091508180156115975750805115806115975750808060200190518101906115979190611e16565b80156115ad57506000856001600160a01b03163b115b95945050505050565b6060610b1b8383600084600080856001600160a01b031684866040516115dc9190611e38565b60006040518083038185875af1925050503d8060008114611619576040519150601f19603f3d011682016040523d82523d6000602084013e61161e565b606091505b509150915061162e868383611638565b9695505050505050565b60608261164d57611648826116ad565b610b1b565b815115801561166457506001600160a01b0384163b155b156116a6576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610d64565b5080610b1b565b8051156116bd5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006020828403121561170157600080fd5b5035919050565b63ffffffff811681146111c857600080fd5b6000806040838503121561172d57600080fd5b82359150602083013561173f81611708565b809150509250929050565b67ffffffffffffffff811681146111c857600080fd5b60006020828403121561177257600080fd5b8135610b1b8161174a565b6001600160a01b03811681146111c857600080fd5b803561179d8161177d565b919050565b803561ffff8116811461179d57600080fd5b600080604083850312156117c757600080fd5b82356117d28161177d565b91506117e0602084016117a2565b90509250929050565b60008060008084860361012081121561180157600080fd5b853567ffffffffffffffff81111561181857600080fd5b86016080818903121561182a57600080fd5b945060c0601f198201121561183e57600080fd5b5060208501925060e08501356118538161177d565b915061186261010086016117a2565b905092959194509250565b60006020828403121561187f57600080fd5b8135610b1b8161177d565b805161179d8161174a565b805161179d81611708565b600060e082840312156118b257600080fd5b60405160e0810181811067ffffffffffffffff821117156118e357634e487b7160e01b600052604160045260246000fd5b60405282516118f18161177d565b815260208301516119018161174a565b6020820152604083015161191481611708565b604082015260608301516119278161177d565b60608201526119386080840161188a565b608082015261194960a08401611895565b60a082015260c083015160c08201528091505092915050565b60006020828403121561197457600080fd5b5051919050565b60006040828403121561198d57600080fd5b6040516040810181811067ffffffffffffffff821117156119be57634e487b7160e01b600052604160045260246000fd5b60405282516119cc8161174a565b815260208301516119dc8161174a565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff818116838216019080821115611a1f57611a1f6119e8565b5092915050565b600060208284031215611a3857600080fd5b8151610b1b81611708565b600082611a6057634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561060d5761060d6119e8565b808202811582820484141761060d5761060d6119e8565b8181038181111561060d5761060d6119e8565b600060208284031215611ab457600080fd5b8151610b1b8161177d565b80516020808301519190811015611ae0576000198160200360031b1b821691505b50919050565b80356001600160e01b03198116811461179d57600080fd5b600060208284031215611b1057600080fd5b610b1b82611ae6565b6000808335601e19843603018112611b3057600080fd5b83018035915067ffffffffffffffff821115611b4b57600080fd5b602001915036819003821315611b6057600080fd5b9250929050565b60006001600160e01b03198089168352868860048501378683016004810160008152868882375093169390920160048101939093525050600801949350505050565b600060208284031215611bbb57600080fd5b8135610b1b81611708565b6000808335601e19843603018112611bdd57600080fd5b830160208101925035905067ffffffffffffffff811115611bfd57600080fd5b803603821315611b6057600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b80356bffffffffffffffffffffffff198116811461179d57600080fd5b60006101008083526001600160e01b031980611c6d88611ae6565b1682850152611c7f6020880188611bc6565b92506080610120860152611c9861018086018483611c0c565b925050611ca86040880188611bc6565b85840360ff1901610140870152611cc0848284611c0c565b9350505080611cd160608901611ae6565b166101608501525090508335611ce681611708565b63ffffffff811660208401525060208401357fffffffffffffffff0000000000000000000000000000000000000000000000008116808214611d2757600080fd5b80604085015250506bffffffffffffffffffffffff19611d4960408601611c35565b166060830152611d5b60608501611c35565b6bffffffffffffffffffffffff198116608084015250611d7d60808501611ae6565b6001600160e01b0319811660a084015250611d9a60a08501611792565b6001600160a01b031660c083015260e09091019190915292915050565b60008060008060808587031215611dcd57600080fd5b8451611dd88161174a565b6020860151909450611de98161174a565b6040860151909350611dfa8161174a565b6060860151909250611e0b81611708565b939692955090935050565b600060208284031215611e2857600080fd5b81518015158114610b1b57600080fd5b6000825160005b81811015611e595760208186018101518583015201611e3f565b50600092019182525091905056fea264697066735822122002c7eb32e3904e28b17f5a021bf7537d2555b9fcc11539ff0c2e43648f0c778a64736f6c63430008150033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "BridgingAlreadyCompleted()": [
        {
          "details": "Attempted to notify about completed bridging while the notification      was already submitted."
        }
      ],
      "BridgingNotCompleted()": [
        {
          "details": "Attempted to finalize a stake request, while bridging completion has not been notified yet."
        }
      ],
      "CallerNotReceiver()": [
        {
          "details": "Attempted to call function by an account that is not the receiver."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReceiverIsZeroAddress()": [
        {
          "details": "Receiver address is zero."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ],
      "StakeRequestAlreadyFinalized()": [
        {
          "details": "Attempted to finalize a stake request that was already finalized."
        }
      ],
      "StakeRequestAlreadyInProgress()": [
        {
          "details": "Attempted to initiate a stake request that was already initialized."
        }
      ],
      "StakeRequestNotInitialized()": [
        {
          "details": "Attempted to finalize a stake request that has not been initialized."
        }
      ],
      "TbtcDepositNotCompleted()": [
        {
          "details": "Deposit was not completed on the tBTC side and tBTC was not minted      to the depositor contract. It is thrown when the deposit neither has      been optimistically minted nor swept."
        }
      ],
      "UnexpectedDepositor(address)": [
        {
          "details": "Depositor address stored in the Deposit Request in the tBTC Bridge      contract doesn't match the current contract address."
        }
      ],
      "UnexpectedTbtcVault(address)": [
        {
          "details": "Vault address stored in the Deposit Request in the tBTC Bridge      contract doesn't match the expected tBTC Vault contract address."
        }
      ]
    },
    "events": {
      "BridgingCompleted(uint256,address,uint256)": {
        "params": {
          "amountToStake": "Amount of tBTC token that is available to stake.",
          "caller": "Address that notified about bridging completion.",
          "depositKey": "Deposit identifier."
        }
      },
      "DepositorFeeDivisorUpdated(uint64)": {
        "params": {
          "depositorFeeDivisor": "New value of the depositor fee divisor."
        }
      },
      "StakeFinalized(uint256,address)": {
        "details": "Deposit details can be fetched from {{ ERC4626.Deposit }}      event emitted in the same transaction.",
        "params": {
          "caller": "Address that finalized the stake request.",
          "depositKey": "Deposit identifier."
        }
      },
      "StakeInitialized(uint256,address,address,uint16)": {
        "details": "Deposit details can be fetched from {{ Bridge.DepositRevealed }}      event emitted in the same transaction.",
        "params": {
          "caller": "Address that initialized the stake request.",
          "depositKey": "Deposit identifier.",
          "receiver": "The address to which the stBTC shares will be minted.",
          "referral": "Data used for referral program."
        }
      },
      "StakeRecalled(uint256,address)": {
        "params": {
          "caller": "Address that called the function to recall the stake.",
          "depositKey": "Deposit identifier."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateDepositKey(bytes32,uint32)": {
        "details": "The deposit key is computed as      `keccak256(fundingTxHash | fundingOutputIndex)`.",
        "params": {
          "fundingOutputIndex": "Output in Bitcoin transaction used to fund        the deposit.",
          "fundingTxHash": "Bitcoin transaction hash (ordered as in Bitcoin internally)"
        },
        "returns": {
          "_0": "Calculated Deposit Key."
        }
      },
      "constructor": {
        "params": {
          "_acre": "Acre contract instance.",
          "_bridge": "tBTC Bridge contract instance.",
          "_tbtcVault": "tBTC Vault contract instance."
        }
      },
      "decodeExtraData(bytes32)": {
        "details": "Unpacks the data from bytes32: 20 bytes of receiver address and      2 bytes of referral, 10 bytes of trailing zeros.",
        "params": {
          "extraData": "Encoded extra data."
        },
        "returns": {
          "receiver": "The address to which the stBTC shares will be minted.",
          "referral": "Data used for referral program."
        }
      },
      "encodeExtraData(address,uint16)": {
        "details": "Packs the data to bytes32: 20 bytes of receiver address and      2 bytes of referral, 10 bytes of trailing zeros.",
        "params": {
          "receiver": "The address to which the stBTC shares will be minted.",
          "referral": "Data used for referral program."
        },
        "returns": {
          "_0": "Encoded extra data."
        }
      },
      "finalizeStakeRequest(uint256)": {
        "details": "This function is expected to be called after `notifyBridgingCompleted`.      In case the call to `Acre.stake` function fails (e.g. because of the      maximum deposit limit being reached), the function should be retried      after the limit is increased or other user withdraws their funds      from Acre contract to make place for another deposit.      The staker has a possibility to submit `recallStakeRequest` that      will withdraw the minted tBTC token and abort staking in Acre contract.",
        "params": {
          "depositKey": "Deposit key computed as                   `keccak256(fundingTxHash | fundingOutputIndex)`."
        }
      },
      "initializeStakeRequest((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address,uint16)": {
        "details": "Requirements:      - `reveal.walletPubKeyHash` must identify a `Live` wallet,      - `reveal.vault` must be 0x0 or point to a trusted vault,      - `reveal.fundingOutputIndex` must point to the actual P2(W)SH        output of the BTC deposit transaction,      - `reveal.blindingFactor` must be the blinding factor used in the        P2(W)SH BTC deposit transaction,      - `reveal.walletPubKeyHash` must be the wallet pub key hash used in        the P2(W)SH BTC deposit transaction,      - `reveal.refundPubKeyHash` must be the refund pub key hash used in        the P2(W)SH BTC deposit transaction,      - `reveal.refundLocktime` must be the refund locktime used in the        P2(W)SH BTC deposit transaction,      - `receiver` must be the receiver address used in the P2(W)SH BTC        deposit transaction as part of the extra data.      - `referral` must be the referral info used in the P2(W)SH BTC        deposit transaction as part of the extra data.      - BTC deposit for the given `fundingTxHash`, `fundingOutputIndex`        can be revealed only one time.      If any of these requirements is not met, the wallet _must_ refuse      to sweep the deposit and the depositor has to wait until the      deposit script unlocks to receive their BTC back.",
        "params": {
          "fundingTx": "Bitcoin funding transaction data, see `IBridge.BitcoinTxInfo`.",
          "receiver": "The address to which the stBTC shares will be minted.",
          "referral": "Data used for referral program.",
          "reveal": "Deposit reveal data, see `IBridge.DepositRevealInfo`."
        }
      },
      "notifyBridgingCompleted(uint256)": {
        "details": "It calculates the amount to stake in Acre contract by deducting      tBTC protocol minting fee and the Depositor fee from the initial      funding transaction amount.      The tBTC protocol minting fee is calculated depending on the process      the tBTC was minted in:      - for swept deposits:        `amount = depositAmount - depositTreasuryFee - depositTxMaxFee`      - for optimistically minted deposits:        ```        amount = depositAmount - depositTreasuryFee - depositTxMaxFee               - optimisticMintingFee        ```      These calculation are simplified and can leave some positive      imbalance in the Depositor contract.      - depositTxMaxFee - this is a maximum transaction fee that can be deducted        on Bitcoin transaction sweeping,      - optimisticMintingFee - this is a optimistic minting fee snapshotted        at the moment of the deposit reveal, there is a chance that the fee        parameter is updated in the tBTC Vault contract before the optimistic        minting is finalized.      The imbalance is left in the tBTC Depositor contract.      The Depositor fee is computed based on the `depositorFeeDivisor`      parameter. The fee is transferred to the treasury wallet on the      stake request finalization.",
        "params": {
          "depositKey": "Deposit key computed as                   `keccak256(fundingTxHash | fundingOutputIndex)`."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recallStakeRequest(uint256)": {
        "details": "This function can be called only after bridging in tBTC Bridge was      completed. Only receiver provided in the extra data of the stake      request can call this function.",
        "params": {
          "depositKey": "Deposit key computed as                   `keccak256(fundingTxHash | fundingOutputIndex)`."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateDepositorFeeDivisor(uint64)": {
        "params": {
          "newDepositorFeeDivisor": "New depositor fee divisor value."
        }
      }
    },
    "stateVariables": {
      "depositorFeeDivisor": {
        "details": "That fee is computed as follows:      `depositorFee = depositedAmount / depositorFeeDivisor`       for example, if the depositor fee needs to be 2% of each deposit,       the `depositorFeeDivisor` should be set to `50` because       `1/50 = 0.02 = 2%`."
      },
      "stakeRequests": {
        "details": "The key is a deposit key computed in the same way as in tBTC Bridge:      `keccak256(fundingTxHash | fundingOutputIndex)`."
      }
    },
    "title": "tBTC Depositor contract.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "BridgingCompleted(uint256,address,uint256)": {
        "notice": "Emitted when bridging completion has been notified."
      },
      "DepositorFeeDivisorUpdated(uint64)": {
        "notice": "Emitted when a depositor fee divisor is updated."
      },
      "StakeFinalized(uint256,address)": {
        "notice": "Emitted when a stake request is finalized."
      },
      "StakeInitialized(uint256,address,address,uint16)": {
        "notice": "Emitted when a stake request is initialized."
      },
      "StakeRecalled(uint256,address)": {
        "notice": "Emitted when a stake request is recalled."
      }
    },
    "kind": "user",
    "methods": {
      "SATOSHI_MULTIPLIER()": {
        "notice": "Multiplier to convert satoshi (8 decimals precision) to tBTC         token units (18 decimals precision)."
      },
      "acre()": {
        "notice": "Acre contract."
      },
      "bridge()": {
        "notice": "tBTC Bridge contract."
      },
      "calculateDepositKey(bytes32,uint32)": {
        "notice": "Calculates deposit key the same way as the Bridge contract."
      },
      "constructor": {
        "notice": "Tbtc Depositor contract constructor."
      },
      "decodeExtraData(bytes32)": {
        "notice": "Decodes receiver address and referral from extra data,"
      },
      "depositorFeeDivisor()": {
        "notice": "Divisor used to compute the depositor fee taken from each deposit         and transferred to the treasury upon stake request finalization."
      },
      "encodeExtraData(address,uint16)": {
        "notice": "Encode receiver address and referral as extra data."
      },
      "finalizeStakeRequest(uint256)": {
        "notice": "This function should be called for previously initialized stake         request, after tBTC minting process completed and tBTC was deposited         in this contract.         It stakes the tBTC from the given deposit into Acre, emitting the         stBTC shares to the receiver specified in the deposit extra data         and using the referral provided in the extra data."
      },
      "initializeStakeRequest((bytes4,bytes,bytes,bytes4),(uint32,bytes8,bytes20,bytes20,bytes4,address),address,uint16)": {
        "notice": "This function allows staking process initialization for a Bitcoin         deposit made by an user with a P2(W)SH transaction. It uses the         supplied information to reveal a deposit to the tBTC Bridge contract."
      },
      "notifyBridgingCompleted(uint256)": {
        "notice": "This function should be called for previously initialized stake         request, after tBTC minting process completed and tBTC was deposited         in this Depositor contract."
      },
      "recallStakeRequest(uint256)": {
        "notice": "Recall bridged tBTC tokens from being requested to stake. This         function can be called by the staker to recover tBTC that cannot         be finalized to stake in Acre contract due to a deposit limit being         reached."
      },
      "stakeRequests(uint256)": {
        "notice": "Mapping of stake requests."
      },
      "tbtcToken()": {
        "notice": "tBTC Token contract."
      },
      "tbtcVault()": {
        "notice": "tBTC Vault contract."
      },
      "updateDepositorFeeDivisor(uint64)": {
        "notice": "Updates the depositor fee divisor."
      }
    },
    "notice": "The contract integrates Acre staking with tBTC minting.         User who wants to stake BTC in Acre should submit a Bitcoin transaction         to the most recently created off-chain ECDSA wallets of the tBTC Bridge         using pay-to-script-hash (P2SH) or pay-to-witness-script-hash (P2WSH)         containing hashed information about this Depositor contract address,         and staker's Ethereum address.         Then, the staker initiates tBTC minting by revealing their Ethereum         address along with their deposit blinding factor, refund public key         hash and refund locktime on the tBTC Bridge through this Depositor         contract.         The off-chain ECDSA wallet listens for these sorts of         messages and when it gets one, it checks the Bitcoin network to make         sure the deposit lines up. If it does, the off-chain ECDSA wallet         may decide to pick the deposit transaction for sweeping, and when         the sweep operation is confirmed on the Bitcoin network, the tBTC Bridge         and tBTC vault mint the tBTC token to the Depositor address.         After tBTC is minted to the Depositor, on the stake finalization         tBTC is staked in Acre contract and stBTC shares are emitted to the         receiver pointed by the staker.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2672,
        "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7000,
        "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
        "label": "bridge",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBridge)6933"
      },
      {
        "astId": 7004,
        "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
        "label": "tbtcVault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ITBTCVault)6957"
      },
      {
        "astId": 7012,
        "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
        "label": "acre",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(Acre)6469"
      },
      {
        "astId": 7018,
        "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
        "label": "stakeRequests",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(StakeRequest)6996_storage)"
      },
      {
        "astId": 7027,
        "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
        "label": "depositorFeeDivisor",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(Acre)6469": {
        "encoding": "inplace",
        "label": "contract Acre",
        "numberOfBytes": "20"
      },
      "t_contract(IBridge)6933": {
        "encoding": "inplace",
        "label": "contract IBridge",
        "numberOfBytes": "20"
      },
      "t_contract(ITBTCVault)6957": {
        "encoding": "inplace",
        "label": "contract ITBTCVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(StakeRequest)6996_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TbtcDepositor.StakeRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeRequest)6996_storage"
      },
      "t_struct(StakeRequest)6996_storage": {
        "encoding": "inplace",
        "label": "struct TbtcDepositor.StakeRequest",
        "members": [
          {
            "astId": 6987,
            "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
            "label": "requestedAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6989,
            "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
            "label": "finalizedAt",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6991,
            "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
            "label": "tbtcDepositTxMaxFee",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6993,
            "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
            "label": "tbtcOptimisticMintingFeeDivisor",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 6995,
            "contract": "contracts/tbtc/TbtcDepositor.sol:TbtcDepositor",
            "label": "amountToStake",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}